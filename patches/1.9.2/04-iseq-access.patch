A debugger or similar introspection tool needs to be able to find all
instruction sequences and access them. This patch facilitates this by
adding the following behavior, analogous to SCRIPT_LINES__ for
capturing source-code lines.

If SCRIPT_ISEQS__ is defined and is a hash, then every time a new
instruction sequence is added, it is accessible from SCRIPT_ISEQS__
using the "filename" as a key.

Similarly, if ISEQS__ is defined and is a hash, then every time a new
instruction sequence is added, it is accessible from ISEQS__ using its
iseq_name as a key.

In this patch if ISEQS__ is set we don't discard the compile options.

Index: iseq.c
===================================================================
--- iseq.c	(revision 28783)
+++ iseq.c	(working copy)
@@ -313,13 +313,17 @@
 }
 
 static VALUE
-cleanup_iseq_build(rb_iseq_t *iseq)
+cleanup_iseq_build(rb_iseq_t *iseq, VALUE type, VALUE src, int saving_iseq)
 {
     struct iseq_compile_data *data = iseq->compile_data;
     VALUE err = data->err_info;
-    iseq->compile_data = 0;
-    compile_data_free(data);
-
+    if (0 == saving_iseq) {
+	iseq->compile_data = 0;
+	compile_data_free(data);
+    } else if (ISEQ_TYPE_EVAL == type) {
+	iseq->source = src;
+    }
+    
     if (RTEST(err)) {
 	rb_funcall2(err, rb_intern("set_backtrace"), 1, &iseq->filename);
 	rb_exc_raise(err);
@@ -424,7 +428,52 @@
     rb_thread_t *th = GET_THREAD();
     VALUE parent = th->base_block->iseq->self;
     return rb_iseq_new_with_opt(node, rb_str_new2("<main>"), filename, filepath, INT2FIX(0),
-				parent, ISEQ_TYPE_MAIN, &COMPILE_OPTION_DEFAULT);
++				parent, ISEQ_TYPE_MAIN, Qnil, &COMPILE_OPTION_DEFAULT);
+}
+
+/* A debugger or similar introspection tool needs to be able to find
+ * all instruction sequences and access them. We facilitate this by
+ * adding the following behavior, analogous to SCRIPT_LINES__ for
+ * capturing source-code lines.
+ * 
+ * If SCRIPT_ISEQS__ is defined and is a hash, then every time a new
+ * instruction sequence is added, it is accessible from SCRIPT_ISEQS__
+ * using the "filename" as a key.
+ * 
+ * Similarly, if ISEQS__ is defined and is a hash, then every time a
+ * new instruction sequence is added, it is accessible from ISEQS__
+ * using its iseq_name as a key.  
+*/
+static int
+update_file_iseq(VALUE filename, VALUE iseq_name, VALUE iseq)
+{
+    ID hash_id;
+    int rc = 0;
+    CONST_ID(hash_id, "SCRIPT_ISEQS__");
+    if (rb_const_defined_at(rb_cObject, hash_id)) {
+        rc = 1;
+        VALUE hash = rb_const_get_at(rb_cObject, hash_id);
+        if (TYPE(hash) == T_HASH) {
+            VALUE iseqs = rb_hash_aref(hash, filename);
+            if (TYPE(iseqs) == T_ARRAY)
+                rb_ary_push(iseqs, iseq);
+            else
+                rb_hash_aset(hash, filename, rb_ary_new3(1, iseq));
+        }
+    }
+    CONST_ID(hash_id, "ISEQS__");
+    if (rb_const_defined_at(rb_cObject, hash_id)) {
+        rc = 1;
+        VALUE hash = rb_const_get_at(rb_cObject, hash_id);
+        if (TYPE(hash) == T_HASH) {
+            VALUE iseqs = rb_hash_aref(hash, iseq_name);
+            if (TYPE(iseqs) == T_ARRAY)
+                rb_ary_push(iseqs, iseq);
+            else
+                rb_hash_aset(hash, iseq_name, rb_ary_new3(1, iseq));
+        }
+    }
+    return rc;
 }
 
 static VALUE
@@ -434,24 +483,26 @@
 {
     rb_iseq_t *iseq;
     VALUE self = iseq_alloc(rb_cISeq);
+    int saving_iseq;
 
     GetISeqPtr(self, iseq);
     iseq->self = self;
 
     prepare_iseq_build(iseq, name, filename, filepath, line_no, parent, type, bopt, option);
     rb_iseq_compile_node(self, node);
-    cleanup_iseq_build(iseq);
+    saving_iseq = update_file_iseq(filename, name, self);
+    cleanup_iseq_build(iseq, type, src, saving_iseq);
     return self;
 }
 
 VALUE
 rb_iseq_new_with_opt(NODE *node, VALUE name, VALUE filename, VALUE filepath, VALUE line_no,
-		     VALUE parent, VALUE type,
+		     VALUE parent, enum iseq_type type, VALUE src,
 		     const rb_compile_option_t *option)
 {
     /* TODO: argument check */
     return rb_iseq_new_with_bopt_and_opt(node, name, filename, filepath, line_no, parent, type,
-					   Qfalse, option);
+					 Qfalse, src, option);
 }
 
 VALUE
Index: test/ruby/test_iseq.rb
===================================================================
--- test/ruby/test_iseq.rb	(revision 28783)
+++ test/ruby/test_iseq.rb	(working copy)
@@ -0,0 +1,40 @@
+# See that setting ISEQS__ and SCRIPT_ISEQS__ saves 
+# RubyVM::Instruction_sequenses
+require 'test/unit'
+
+class TestIseqAccess < Test::Unit::TestCase
+  def setup
+    old_verbosity = $VERBOSE
+    $VERBOSE = nil
+    Kernel.const_set(:ISEQS__, {})
+    Kernel.const_set(:SCRIPT_ISEQS__, {})
+    $VERBOSE = old_verbosity
+  end
+
+  def teardown
+    old_verbosity = $VERBOSE
+    $VERBOSE = nil
+    Kernel.const_set(:ISEQS__, nil)
+    Kernel.const_set(:SCRIPT_ISEQS__, nil)
+    $VERBOSE = old_verbosity
+  end
+
+  def test_basic
+    sizes=[]
+    [ISEQS__, SCRIPT_ISEQS__].each do |iseq_hash|
+      sizes << iseq_hash.size
+    end
+    # defining five should trigger five instruction sequence additions
+    # to ISEQS__ and SCRIPT_ISEQS__
+    # 
+    eval 'def five; 5 end'
+    assert_equal sizes[0], sizes[1]
+    [SCRIPT_ISEQS__, ISEQS__].each do |iseq_hash|
+      assert_equal true, iseq_hash.size > sizes.pop
+      assert_equal Hash, iseq_hash.class
+      a = iseq_hash.first
+      assert_equal Array, a.class
+      assert_equal RubyVM::InstructionSequence, iseq_hash.values[0][0].class
+    end
+  end
+end

