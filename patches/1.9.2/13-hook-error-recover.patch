Here is the situation this patch addressed. A trace hook was raising
an exception when call from a C return. The hook would terminate, but
the same event (e.g. C return would get called again causing the same
exception from the trace hook. This patch fields errors from a hook
and tries to do something that doesn't cause infinite looping.

This code with exec_event_tracing is a little bit hacky, and was
keeping a hook from tracing into itself. It was written before the
per-frame tracing bit was added. Possibly it isn't needed any more.


Index: test/ruby/test_settracefunc.rb
===================================================================
--- test/ruby/test_settracefunc.rb	(revision 28955)
+++ test/ruby/test_settracefunc.rb	(working copy)
@@ -350,4 +350,25 @@
     assert_equal([], events[:set])
     assert_equal([], events[:add])
   end
+
+  def test_trace_proc_that_raises_exception_recovery
+    $first_time = true
+    $traced = []
+    s = Proc.new {|event|
+      if $first_time
+        $first_time = false
+        raise RuntimeError
+      end
+      $traced << event
+    }
+    begin
+      set_trace_func(s)
+      assert_equal(false, 'hook should have raised error')
+    rescue RuntimeError
+      x = 1
+      set_trace_func(nil)
+      assert_equal(false, $traced.empty?, $traced)
+    end
+  end
+
 end
