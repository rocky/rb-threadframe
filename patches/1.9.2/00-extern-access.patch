This patch allows a C extension -- maintained outside of to Ruby -- to get access to some methods inside Ruby and some of the fields inside vm_core.h.

Also some minor spelling corrections have been made.

For vm_core.h, a number of the changes just move some struct fields before #ifdefs to make it easier for a C extension to access those fields.

An external C extension may have to copy a bit of the vm_core.h header. See for example ext/vm_core_mini.h of rb-threadframe. 

Without this patch, access to some fields is difficult because there are configuration-specific #ifdef's that change the size of various structures. For example in rb_thread_struct there is:
  #ifdef __ia64
        VALUE ...
  #endif
  ...
  /* tracer */
  rb_event_hook_t *event_hooks;
  rb_event_hook_t *event_flags;

As a result, fields defined after the #ifdefs like event_flags are inaccessible to a C extension unless it has access the C-preprocessor flags used to build Ruby. 

For proc.c we allow external access to method_arity by removing "static".

Index: vm_core.h
===================================================================
--- vm_core.h	(revision 28955)
+++ vm_core.h	(working copy)
@@ -394,6 +394,16 @@
     /* passing state */
     int state;
 
+    /* tracer */
+    rb_event_hook_t *event_hooks;
+    rb_event_flag_t event_flags;
+    int tracing;  /* 0 if not tracing. If less than 0, skip that many
+		     C call/return pairs */
+
+    /* misc */
+    int method_missing_reason;
+    int abort_on_exception;
+
     /* for rb_iterate */
     const rb_block_t *passed_block;
 
@@ -416,6 +426,14 @@
     int priority;
     int slice;
 
+    /* statistics data for profiler */
+    VALUE stat_insn_usage;
+
+    /* fiber */
+    VALUE fiber;
+    VALUE root_fiber;
+    rb_jmpbuf_t root_jmpbuf;
+
     native_thread_data_t native_thread_data;
     void *blocking_region_buffer;
 
@@ -464,22 +482,7 @@
     jmp_buf machine_regs;
     int mark_stack_len;
 
-    /* statistics data for profiler */
-    VALUE stat_insn_usage;
-
-    /* tracer */
-    rb_event_hook_t *event_hooks;
-    rb_event_flag_t event_flags;
-    int tracing;
-
-    /* fiber */
-    VALUE fiber;
-    VALUE root_fiber;
-    rb_jmpbuf_t root_jmpbuf;
-
     /* misc */
-    int method_missing_reason;
-    int abort_on_exception;
 #ifdef USE_SIGALTSTACK
     void *altstack;
 #endif
Index: proc.c
===================================================================
--- proc.c	(revision 28955)
+++ proc.c	(working copy)
@@ -27,7 +27,7 @@
 VALUE rb_iseq_parameters(const rb_iseq_t *iseq, int is_proc);
 
 static VALUE bmcall(VALUE, VALUE);
-static int method_arity(VALUE);
+int method_arity(VALUE);
 static int rb_obj_is_method(VALUE m);
 rb_iseq_t *rb_method_get_iseq(VALUE method);
 
@@ -1630,7 +1630,7 @@
     return INT2FIX(n);
 }
 
-static int
+int
 method_arity(VALUE method)
 {
     struct METHOD *data;
