diff --git a/common.mk b/common.mk
index eb89a2b..cb32293 100644
--- a/common.mk
+++ b/common.mk
@@ -92,6 +92,7 @@ COMMONOBJS    = array.$(OBJEXT) \
 		vm.$(OBJEXT) \
 		vm_dump.$(OBJEXT) \
 		thread.$(OBJEXT) \
+		frame.$(OBJEXT) \
 		cont.$(OBJEXT) \
 		$(BUILTIN_ENCOBJS) \
 		$(BUILTIN_TRANSOBJS) \
diff --git a/compile.c b/compile.c
index 71059de..4633d7c 100644
--- a/compile.c
+++ b/compile.c
@@ -960,7 +960,7 @@ new_child_iseq(rb_iseq_t *iseq, NODE *node,
 
     debugs("[new_child_iseq]> ---------------------------------------\n");
     ret = rb_iseq_new_with_opt(node, name, iseq_filename(iseq->self), iseq_filepath(iseq->self), INT2FIX(line_no),
-			       parent, type, iseq->compile_data->option);
+			       parent, type, Qnil, iseq->compile_data->option);
     debugs("[new_child_iseq]< ---------------------------------------\n");
     iseq_add_mark_object(iseq, ret);
     return ret;
diff --git a/frame.c b/frame.c
new file mode 100644
index 0000000..313492e
--- /dev/null
+++ b/frame.c
@@ -0,0 +1,1005 @@
+/* 
+ * Copyright (C) 2012 Rocky Bernstein
+ *
+ *  Access to Ruby's rb_control_frame_t and methods for working with that.
+ *  Things like getting a binding for a control frame. In Ruby 1.9.2 this code 
+ *  was in extension rb-threadframe
+ */
+/* What release we got? */
+
+#include <string.h>
+#include <signal.h>
+
+#include <ruby.h>
+#include "thread_pthread.h"
+#include "vm_core.h"
+#include "node.h"
+#include "gc.h"
+#include "iseq.h"
+
+/* From Ruby 1.9.2 thread.c: */
+rb_control_frame_t *
+thread_control_frame(rb_thread_t *th) 
+{
+  if (th == NULL || ((VALUE) th) == Qnil)
+    th = GET_THREAD(); /* main thread */
+  return rb_vm_get_ruby_level_next_cfp(th, th->cfp);
+}
+
+
+/* Frames can't be detached from the control frame they live in.
+   So we create a structure to contain the pair. 
+
+   The signature fields are used to weakly verify the validity of cfp.
+   it stores to contents of fields in cfp on allocation.  This, the
+   validity of "th" pointing to a valid thread, and cfp pointing to valid
+   location inside the frame area we use to check that this structure
+   is valid. */
+
+typedef struct 
+{
+    rb_thread_t *th;
+    rb_control_frame_t *cfp;
+    VALUE *signature1[3]; /* iseq, flag, self */
+    VALUE *signature2[1]; /* proc */
+} thread_frame_t;
+
+VALUE rb_cFrame;       /* ThreadFrame class */
+VALUE rb_eThreadFrameError;  /* Error raised on invalid frames. */
+
+/* Static forward declarations */
+static VALUE frame_iseq(VALUE klass);
+static VALUE frame_prev_internal(rb_control_frame_t *prev_cfp, 
+					rb_thread_t *th, int n);
+static int   frame_stack_size_internal(rb_control_frame_t *cfp, 
+					      rb_thread_t *th);
+static VALUE frame_type(VALUE klass);
+
+
+extern void iseq_mark(void *ptr); /* in iseq.c */
+
+
+/* 
+  FIXME: I've never seen the following routine get called.
+  Why? 
+ */
+static void
+frame_mark(void *ptr)
+{
+    RUBY_MARK_ENTER("thread_frame");
+    if (ptr) {
+	thread_frame_t *tf = ptr;
+	if (tf && tf->cfp && RUBY_VM_NORMAL_ISEQ_P(tf->cfp->iseq)) {
+	    iseq_mark(tf->cfp->iseq);
+	}
+    }
+}
+
+static void
+tf_free(void *ptr) 
+{
+    thread_frame_t *tf;
+    if (ptr) {
+	tf = ptr;
+	/* All valid frame types have 0x1 set so we will use this.
+	   Warning: this is an undocumented assumption which may someday
+	   be wrong. */
+	if (tf->cfp && ((tf->cfp->flag & 0x1) == 0) && 
+	    RUBY_VM_NORMAL_ISEQ_P(tf->cfp->iseq)) 
+	    tf->cfp->iseq->in_use--;
+	xfree(ptr);
+    }
+}
+
+/* 
+   Allocate a RubyVM::ThreadFrame used by new. Less common than
+   thread_frame_t_alloc(). The caller is responsible for filling in
+   the C struct data. Below we wrap NULL.
+ */
+static VALUE
+frame_alloc(VALUE klass)
+{
+    return Data_Wrap_Struct(klass, frame_mark, tf_free, NULL);
+}
+
+/* 
+   Allocate a RubyVM::ThreadFrame and set its threadframe structure.
+   This is the more common allocate routine since one normally doesn't
+   create a threadframe without <i>first</i> having something to put in it.
+ */
+static thread_frame_t *
+frame_t_alloc(VALUE tfval)
+{
+    thread_frame_t *tf = ALLOC(thread_frame_t);
+    memset(tf, 0, sizeof(thread_frame_t));
+    DATA_PTR(tfval) = tf;
+    return tf;
+}
+
+/* 
+   Check to see if tf is valid. +true+ is returned if we can't prove
+   the frame is invalide. +nil+ or +false+ is returned if something is not
+   right. In those cases where we don't know that we have a valid frame,
+   we also NULL out the cfp if that hasn't been done already. This will
+   keep garbage collection from marking bad data.
+ */
+static VALUE
+frame_invalid_internal(thread_frame_t *tf)
+{
+    int cmp;
+
+    /* All valid frame types have 0x1 set so we will use this.
+       Warning: this is an undocumented assumption which may someday
+       be wrong. */
+    if (!tf->cfp) return Qtrue;
+    if ((tf->cfp->flag & 0x1) == 0) {
+	tf->cfp = NULL;
+	return Qtrue;
+    }
+
+    if (RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(tf->th, tf->cfp)) {
+	tf->cfp = NULL;
+	return Qtrue;
+    }
+    if (RUBY_VM_NORMAL_ISEQ_P(tf->cfp->iseq)) {
+	cmp = (0 == memcmp(tf->signature1, &(tf->cfp->iseq), 
+			   sizeof(tf->signature1)) &&
+	       0 == memcmp(tf->signature2, &(tf->cfp->proc), 
+			   sizeof(tf->signature2)));
+	if (cmp) return Qfalse;
+	tf->cfp = NULL;
+	return Qtrue;
+    } else {
+	/* FIXME: figure out what to do here. Probably more work is
+	 * needed in frame_prev_internal.
+	 */
+	return Qnil;
+    }
+}
+
+/* 
+   COPY_SIGNATURE saves some invariant data from the frame for
+   comparison later when the frame is used again.
+
+   Even though fields like iseq may not be valid for things C function
+   frames, nevertheless all we care about is whether they could change
+   or not over the course of evaluation. Hving more data to compare
+   against to verify whether a frame is valid is helpful. If the data
+   is random unitialized data, that's even better. Again just so long as
+   that random data doesn't change in the course of normal use.
+
+   FIXME: There are probably more fields which could be saved.  */
+#define COPY_SIGNATURE(tf, cfp)					  \
+    memcpy(tf->signature1, &(cfp->iseq), sizeof(tf->signature1)); \
+    memcpy(tf->signature2, &(cfp->proc), sizeof(tf->signature2)) 
+    
+#define SAVE_FRAME(TF, TH)						\
+    tf->th = TH;							\
+    tf->cfp = thread_control_frame(tf->th);				\
+    tf->cfp->iseq->in_use++;						\
+    COPY_SIGNATURE(tf, tf->cfp);					\
+
+#define GET_THREAD_PTR \
+    rb_thread_t *th; \
+    GetThreadPtr(thval, th)
+
+
+/*
+ *  call-seq:
+ *     RubyVM::Frame#threadframe  -> frame_object
+ * 
+ *  Returns a RubyVM::ThreadFrame object for the given thread.
+ */
+static VALUE
+frame_threadframe(VALUE thval)
+{
+    thread_frame_t *tf = ALLOC(thread_frame_t);
+    GET_THREAD_PTR;
+    memset(tf, 0, sizeof(thread_frame_t));
+    SAVE_FRAME(tf, th) ;
+    return Data_Wrap_Struct(rb_cFrame, frame_mark, tf_free, tf);
+}
+
+#define FRAME_SETUP \
+    thread_frame_t *tf; \
+    Data_Get_Struct(klass, thread_frame_t, tf)
+
+#define FRAME_SETUP_WITH_ERROR			    \
+    FRAME_SETUP;				    \
+    if (Qtrue == frame_invalid_internal(tf)) \
+	rb_raise(rb_eThreadFrameError, "invalid frame")
+
+#define FRAME_FIELD_METHOD(FIELD)	\
+static VALUE					\
+frame_##FIELD(VALUE klass)		\
+{						\
+    FRAME_SETUP ;			\
+    return tf->cfp->FIELD;			\
+}
+
+#define FRAME_FP_METHOD(REG)				\
+VALUE						                \
+frame_##REG(VALUE klass, VALUE index)			\
+{								\
+    if (!FIXNUM_P(index)) {					\
+	rb_raise(rb_eTypeError, "integer argument expected");	\
+    } else {							\
+        long int i = FIX2INT(index);				\
+	FRAME_SETUP_WITH_ERROR ;					\
+	/* FIXME: check index is within range. */		\
+	return tf->cfp->REG[-i]; /* stack  grows "down" */	\
+    }								\
+}
+
+static long int
+frame_sp_size_internal(thread_frame_t *tf) 
+{
+    rb_control_frame_t *prev_cfp;
+    long int ret_val;
+    prev_cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(tf->cfp);
+    if (RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(tf->th, prev_cfp))
+	return Qnil;
+    ret_val = tf->cfp->sp - prev_cfp->sp - 1;
+    /* FIXME: Why For C Functions we tack on 2 for this RubyVM::ENV? */
+    if (RUBYVM_CFUNC_FRAME_P(tf->cfp)) ret_val += 2;
+    return ret_val;
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#sp_size  -> FixNum
+ * 
+ * Returns the number of stack or sp entries in the current
+ * frame. That is the, number values that have been pushed onto the
+ * stack since the current call.  This is different than
+ * RubyVM::ThreadFrame#stack_size which counts the number of frames in
+ * the call stack. +nil+ is returned if there is an error.
+ */
+VALUE 
+frame_sp_size(VALUE klass) 
+{
+    FRAME_SETUP_WITH_ERROR ;
+    return INT2FIX(frame_sp_size_internal(tf));
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#sp_set(n, newvalue)  -> object
+ * 
+ * Sets VM stack position <i>n</i> to <i>newvalue</i>. The top object
+ * is position 0. 1 is the next object.
+ */
+static VALUE 
+frame_sp_set(VALUE klass, VALUE index, VALUE newvalue)
+{
+    if (!FIXNUM_P(index)) {
+	rb_raise(rb_eTypeError, "integer argument expected");
+    } else {
+        long int i = FIX2INT(index);
+	FRAME_SETUP_WITH_ERROR ;
+	if (i <= frame_sp_size_internal(tf)) {
+	    /* stack  grows "down" */
+	    tf->cfp->sp[-i] = newvalue;
+	} else {
+	    rb_raise(rb_eArgError, "argument too big");
+	}
+	return newvalue;
+    }
+}
+
+#ifndef NO_reg_pc
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#pc_offset=
+ * 
+ * Sets pc to the offset given. 
+ * WARNING, this is pretty dangerous. You need to set this to a valid
+ * instruction offset since little checking is done.
+ */
+static VALUE
+frame_set_pc_offset(VALUE klass, VALUE offset_val)
+{
+    int offset;
+    FRAME_SETUP_WITH_ERROR ;
+
+    if (!FIXNUM_P(offset_val)) {
+	rb_raise(rb_eTypeError, "integer argument expected");
+    } else {
+        offset = FIX2INT(offset_val);
+	if (RUBY_VM_NORMAL_ISEQ_P(tf->cfp->iseq) && 
+	    (tf->cfp->pc != 0 && tf->cfp->iseq != 0)) {
+            tf->cfp->pc = tf->cfp->iseq->iseq_encoded + offset;
+	}
+    }
+    return Qtrue;
+}
+#endif
+
+#if 0
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#flag -> Fixnum
+ *
+ *  Returns the frame flags, a FIXNUM which should be interpreted as a
+ *  bitmask.
+ *
+ */
+static VALUE frame_flag(VALUE klass) 
+{ 
+    /* handled by FRAME_FIELD_METHOD macro;  */
+}
+/* The above declaration is to make RDOC happy. */
+#endif
+FRAME_FIELD_METHOD(flag) ;
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#binding   -> binding
+ *
+ *  Returns a binding for a given thread frame.
+ */
+static VALUE
+frame_binding(VALUE klass)
+{
+    FRAME_SETUP_WITH_ERROR ;
+
+    {
+	rb_binding_t *bind = 0;
+	VALUE bindval = rb_binding_frame_new(tf->th, tf->cfp);
+	GetBindingPtr(bindval, bind);
+	bind->line_no = rb_vm_get_sourceline(tf->cfp);
+	if (tf->cfp->iseq) {
+	    bind->filename = tf->cfp->iseq->filename;
+	} else {
+	    bind->filename = tf->th->vm->progname;
+	}
+	return bindval;
+    }    
+    /* NOTREACHED */
+    return Qnil;
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#equal(tf)   -> bool
+ *
+ *  Returns true if two thread frames are equal.
+ */
+static VALUE
+frame_equal(VALUE klass, VALUE tfval2)
+{
+    FRAME_SETUP_WITH_ERROR ;
+
+    {
+	thread_frame_t *tf2;
+	if (!rb_obj_is_kind_of(tfval2, rb_cFrame)) {
+	rb_raise(rb_eTypeError, 
+		 "comparison argument must be an instance of %s (is %s)",
+		 rb_obj_classname(klass), rb_obj_classname(tfval2));
+	}
+	Data_Get_Struct(tfval2, thread_frame_t, tf2);
+	if (Qtrue == frame_invalid_internal(tf2))
+	    rb_raise(rb_eThreadFrameError, "invalid frame");
+
+	/* And just when you thought I'd never get around to the
+	   actual comparison... 
+
+	   Comparing cfp's should be enough, but we'll throw in the thread
+	   for good measure.
+	*/
+	return (tf->th == tf2->th && tf->cfp == tf2->cfp) 
+	    ? Qtrue : Qfalse;
+    }
+    /* NOTREACHED */
+    return Qnil;
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame.new(thread)          -> frame_object
+ *
+ *  Returns an RubyVM::ThreadFrame object which can contains dynamic frame
+ *  information. Don't use this directly. Instead use one of the 
+ *  class methods.
+ *
+ *    RubyVM::ThreadFrame::VERSION               => 0.1 
+ *    RubyVM::ThreadFrame::current.flag          => 72
+ *    RubyVM::ThreadFrame::current.proc          => false
+ *    RubyVM::ThreadFrame::current.self          => 'main'
+ */
+static VALUE
+frame_initialize(VALUE tfval, VALUE thval)
+{
+    thread_frame_t *tf = frame_t_alloc(tfval);
+    GET_THREAD_PTR ;
+    memset(tf, 0, sizeof(thread_frame_t));
+    DATA_PTR(tfval) = tf;
+    SAVE_FRAME(tf, th) ;
+    return tfval;
+}
+
+/*
+ * call-seq:
+ *    RubyVM::ThreadFrame#invalid? -> Boolean
+ *
+ * Returns true if the frame is no longer valid. On the other hand,
+ * since the test we use is weak, returning false might not mean the
+ * frame is valid, just that we can't disprove that it is not invalid.
+ * 
+ * It is suggested that frames are used in a way that ensures they will
+ * be valid. In particular frames should have local scope and frames to 
+ * threads other than the running one should be stopped while the frame 
+ * variable is active.
+ */
+static VALUE
+frame_invalid(VALUE klass)
+{
+    FRAME_SETUP ;
+    return frame_invalid_internal(tf);
+}
+
+static VALUE
+frame_is_return_stop(VALUE klass)
+{
+    FRAME_SETUP ;
+    return (tf->cfp->tracing & VM_FRAME_TRACE_RETURN) ? Qtrue : Qfalse;
+}
+
+static VALUE
+frame_is_trace_off(VALUE klass)
+{
+    FRAME_SETUP ;
+    return (tf->cfp->tracing & VM_FRAME_TRACE_OFF) ? Qtrue : Qfalse;
+}
+
+/*
+ *  call-seq:
+ *     ThreadFrame#method  -> String or nil
+ * 
+ * Returns the method associated with the frame or nil of none.
+ * ThreadFrameError can be raised if the threadframe
+ * object is no longer valid.
+ */
+static VALUE
+frame_method(VALUE klass)
+{
+    FRAME_SETUP_WITH_ERROR ;			\
+
+    switch (VM_FRAME_TYPE(tf->cfp)) {
+      case VM_FRAME_MAGIC_BLOCK:
+      case VM_FRAME_MAGIC_EVAL:
+      case VM_FRAME_MAGIC_LAMBDA:
+      case VM_FRAME_MAGIC_METHOD:
+      case VM_FRAME_MAGIC_TOP:
+	if (RUBY_VM_NORMAL_ISEQ_P(tf->cfp->iseq)) 
+	    return tf->cfp->iseq->name;
+	else
+	    return Qnil; /* unknown */
+    case VM_FRAME_MAGIC_CFUNC: {
+          const char *method_name = rb_id2name(tf->cfp->me->def->original_id);
+	  return rb_str_new2((NULL == method_name) ? "" : method_name );
+        }
+      default:
+	/* FIXME */
+	return frame_type(klass);
+    }
+    /* NOTREACHED */
+    return Qnil;
+}
+
+/*
+ *  call-seq:
+ *     ThreadFrame#pc_offset  -> Fixnum
+ * 
+ * Returns the offset inside the iseq or "program-counter offset" or -1
+ * If invalid/unstarted. ThreadFrameError can be raised if the threadframe
+ * object is no longer valid.
+ */
+static VALUE
+frame_pc_offset(VALUE klass)
+{
+    unsigned long pc;
+    FRAME_SETUP_WITH_ERROR ;
+
+    if (RUBY_VM_NORMAL_ISEQ_P(tf->cfp->iseq) && 
+	(tf->cfp->pc != 0 && tf->cfp->iseq != 0)) {
+	pc = tf->cfp->pc - tf->cfp->iseq->iseq_encoded;
+	return INT2FIX(pc);
+    } else {
+        return INT2FIX(-1);
+    }
+}
+
+
+/*
+ *  call-seq:
+ *     ThreadFrame#iseq           -> ISeq
+ *
+ *  Returns an instruction sequence object from the instruction sequence
+ *  found inside the ThreadFrame object or nil if there is none.
+ *
+ */
+static VALUE
+frame_iseq(VALUE klass)
+{
+    rb_iseq_t *iseq;
+    VALUE rb_iseq;
+    FRAME_SETUP_WITH_ERROR ;
+    iseq = tf->cfp->iseq;
+    if (!iseq) return Qnil;
+    rb_iseq = iseq_alloc_shared(rb_cISeq);
+    RDATA(rb_iseq)->data = iseq;
+    return rb_iseq;
+}
+
+/* 
+   See the above frame_prev comment for what's going on here.
+*/
+static VALUE
+frame_next(VALUE klass)
+{
+    rb_control_frame_t *cfp = NULL;
+    FRAME_SETUP_WITH_ERROR ;
+    cfp = RUBY_VM_NEXT_CONTROL_FRAME(tf->cfp);
+
+    if ((void *)(cfp) <= (void *)(tf->th->stack))
+        return Qnil;
+    else {
+        thread_frame_t *next_tf;
+        VALUE next = frame_alloc(rb_cFrame);
+	frame_t_alloc(next);
+	Data_Get_Struct(next, thread_frame_t, next_tf);
+	next_tf->th  = tf->th;
+	next_tf->cfp = cfp;
+	COPY_SIGNATURE(tf, cfp);
+	return next;
+    }
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#prev(n=1) -> frame_object
+ *
+ *  Returns a RubyVM::ThreadFrame object for the frame prior to the
+ *  ThreadFrame object or +nil+ if there is none. Setting n=0 just
+ *  returns the object passed.  A negative starts from the end. So
+ *  prev(-1) is the top frame.  Counts outside of the range
+ *  -stack_size .. stack_size-1 exceed the the range of the stack and
+ *  return nil.
+ *
+ */
+VALUE
+frame_prev(int argc, VALUE *argv, VALUE klass)
+{
+    VALUE nv;
+    int n;
+
+    FRAME_SETUP_WITH_ERROR ;
+
+    rb_scan_args(argc, argv, "01", &nv);
+
+    if (Qnil == nv)
+	n = 1;
+    else if (!FIXNUM_P(nv)) {
+	rb_raise(rb_eTypeError, "integer argument expected");
+    } else
+	n = FIX2INT(nv);
+    
+    if (n < 0) {
+      int stack_size = frame_stack_size_internal(tf->cfp, tf->th);
+      if (-n > stack_size) return Qnil;
+      n = stack_size + n;
+    }
+    if (n == 0) return klass;
+    return frame_prev_internal(tf->cfp, tf->th, n);
+}
+
+/* 
+   See the above frame_prev comment for what's going on here.
+*/
+static VALUE
+frame_prev_internal(rb_control_frame_t *prev_cfp, rb_thread_t *th, 
+			   int n)
+{
+  thread_frame_t *tf;
+  VALUE prev;
+  rb_control_frame_t *cfp = NULL;
+
+  for (; n > 0; n--) {
+    cfp = prev_cfp;
+    prev_cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp);
+    if (VM_FRAME_TYPE(prev_cfp) == VM_FRAME_MAGIC_FINISH) {
+	prev_cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(prev_cfp);
+    }
+    if (RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(th, prev_cfp))
+	return Qnil;
+  }
+  if (!cfp) return Qnil;
+
+  prev = frame_alloc(rb_cFrame);
+  frame_t_alloc(prev);
+  Data_Get_Struct(prev, thread_frame_t, tf);
+  tf->th  = th;
+  tf->cfp = prev_cfp;
+  COPY_SIGNATURE(tf, tf->cfp);
+  return prev;
+}
+
+FRAME_FIELD_METHOD(proc) ;
+FRAME_FIELD_METHOD(self) ;
+
+static VALUE
+frame_return_stop_set(VALUE klass, VALUE boolval)
+{
+    short int boolmask = !(NIL_P(boolval) || Qfalse == boolval);
+    FRAME_SETUP ;
+    
+    if (boolmask)
+	tf->cfp->tracing |=  VM_FRAME_TRACE_RETURN;
+    else
+	tf->cfp->tracing &= ~VM_FRAME_TRACE_RETURN;
+    return boolval;
+}
+
+static VALUE
+frame_trace_off_set(VALUE klass, VALUE boolval)
+{
+    short int boolmask = !(NIL_P(boolval) || Qfalse == boolval);
+    FRAME_SETUP ;
+    
+    if (boolmask)
+	tf->cfp->tracing |=  VM_FRAME_TRACE_OFF;
+    else
+	tf->cfp->tracing &= ~VM_FRAME_TRACE_OFF;
+    return boolval;
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame::current  -> frame_object
+ * 
+ *  Returns a ThreadFrame object for the currently executing thread.
+ *  Same as: RubyVM::ThreadFrame.new(Thread::current)
+ */
+static VALUE
+frame_s_current(VALUE klass)
+{
+    thread_frame_t *tf = frame_t_alloc(klass);
+    SAVE_FRAME(tf, ruby_current_thread) ;
+    return Data_Wrap_Struct(klass, frame_mark, tf_free, tf);
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame::prev(thread)     -> threadframe_object
+ *     RubyVM::ThreadFrame::prev(thread, n)  -> threadframe_object
+ *     RubyVM::ThreadFrame::prev             -> threadframe_object
+ *     RubyVM::ThreadFrame::prev(n)          -> threadframe_object
+ *
+ *  In the first form, we return a RubyVM::ThreadFrame prior to the
+ *  Thread object passed. That is we go back one frame from the
+ *  current frfame.
+ *
+ *  In the second form we try to go back that many thread frames. 
+ *
+ *  In the the third form, the current thread is assumed, and like the
+ *  first form we go back one frame.
+ * 
+ *  The fourth form, like the third form, we assume the current
+ *  thread.  And like the first form we go back we try to back a
+ *  FixNum number of entries.
+ *
+ *  When count +n+ is given 1 is synonymous with the previous frame
+ *  and 0 is invalid. If the +n+ is negative, we count from the bottom
+ *  of the frame stack.
+ *
+ *  In all cases we return a RubyVM::ThreadFrame or nil if we can't 
+ *  go back (or forward for a negative +n+) that many frames. 
+ *
+ */
+static VALUE
+frame_s_prev(int argc, VALUE *argv, VALUE klass)
+{
+    VALUE first_val;
+    VALUE second_val;
+    VALUE thval = Qnil;
+    int   prev_count = 0;
+    rb_thread_t *th = NULL;
+
+    /* Such complicated options processing. But we do want this
+       routine to be convenient. */
+    rb_scan_args(argc, argv, "02", &first_val, &second_val);
+    switch (argc) {
+      case 0:
+	th = ruby_current_thread;
+        /* Do'nt count the RubyVM::ThreadFrame.prev call */
+	prev_count = 2; 
+	break;
+      case 1:
+	if (FIXNUM_P(first_val)) {
+	    prev_count = FIX2INT(first_val);
+	    if (prev_count > 0) prev_count++ ;
+	    th = ruby_current_thread;
+	} else 
+	    if (Qtrue == rb_obj_is_kind_of(first_val, rb_cThread)) {
+		GetThreadPtr(first_val, th);
+               /* Don't count the RubyVM::ThreadFrame.prev call */
+		prev_count = 1; 
+	    } else {
+		rb_raise(rb_eTypeError, 
+			 "FixNum or ThreadFrame object expected for first argument");
+	    }
+	break;
+      case 2: 
+	if (Qtrue == rb_obj_is_kind_of(first_val, rb_cThread)) {
+	    GetThreadPtr(first_val, th);
+	} else {
+	    rb_raise(rb_eTypeError, 
+		     "ThreadFrame object expected for first argument");
+	}
+	if (FIXNUM_P(second_val)) {
+	    prev_count = FIX2INT(second_val);
+	} else 
+	    rb_raise(rb_eTypeError, 
+		     "FixNum previous count expected for second argument");
+	break;
+      default:
+	rb_raise(rb_eArgError, "wrong number of arguments (%d for 1..2)", argc);
+    }
+    
+    if (0 == prev_count) {
+	rb_raise(rb_eArgError, 
+		 "previous count can not be 0. Use current instead of prev");
+    }
+
+    if (0 > prev_count) {
+      int stack_size = frame_stack_size_internal(th->cfp, th);
+      if (-prev_count > stack_size) return Qnil;
+      prev_count = stack_size + prev_count;
+    }
+
+    return frame_prev_internal(th->cfp, th, prev_count);
+}
+
+#if FINISHED
+/*
+ * call-seq:
+ *    RubyVM::ThreadFrame#source_container() -> [Type, String]
+ *
+ * Returns a tuple representing kind of container, e.g. file
+ * eval'd string object, and the name of the container. If file,
+ * it would be a file name. If an eval'd string it might be the string.
+ */
+static VALUE
+frame_source_container(VALUE klass)
+{
+    VALUE filename = Qnil;
+    const char *contain_type;
+    rb_control_frame_t *cfp;
+    int is_eval = 0;
+
+    FRAME_SETUP ;
+
+    for ( cfp = tf->cfp; cfp && !cfp->iseq && RUBYVM_CFUNC_FRAME_P(cfp); 
+	  cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp) ) ;
+
+
+    if (cfp->iseq) 
+	filename = cfp->iseq->filename;
+    else {
+	if (tf->th->vm->progname) 
+	    filename = tf->th->vm->progname;
+	else 
+	    return Qnil;
+    }
+    
+    contain_type = source_container_type(filename);
+
+    is_eval = ( 0 == strcmp("string", contain_type)
+		&& VM_FRAME_MAGIC_EVAL == VM_FRAME_TYPE(tf->cfp) );
+
+    if ( is_eval ) {
+	/* Try to pick up string from stack. */
+	VALUE prev = frame_prev_internal(tf->cfp, tf->th, 1);
+	thread_frame_t *prev_tf;
+	Data_Get_Struct(prev, thread_frame_t, prev_tf);
+	
+	if (RUBYVM_CFUNC_FRAME_P(prev_tf->cfp) && 
+	    frame_stack_size_internal(prev_tf->cfp, prev_tf->th) >= 3)
+	    filename = frame_sp(prev, INT2FIX(3));
+    }
+
+    return rb_ary_new3(2, rb_str_new2(contain_type), filename);
+}
+#endif
+
+/*
+ * call-seq:
+ *    RubyVM::ThreadFrame#source_location() -> Array 
+ *
+ * Returns an array of source location positions that match
+ * +tf.instruction_offset+. A source location position is left
+ * implementation dependent. It could be line number, a line number
+ * and start and end column, or a start line number, start column, end
+ * line number, end column.
+ */
+static VALUE
+frame_source_location(VALUE klass)
+{
+    rb_control_frame_t *cfp;
+    FRAME_SETUP ;
+
+    /* For now, it appears like we have line numbers only when there
+       is an instruction sequence. The heuristic that is used by
+       vm_backtrace_each of vm.c seems to be to use the line number of
+       the closest control frame that has an instruction sequence.
+       FIXME: investigate whether this is always the most accurate location. If
+       not, improve.
+    */
+    for ( cfp = tf->cfp; cfp && !cfp->iseq && RUBYVM_CFUNC_FRAME_P(cfp); 
+	  cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp) ) ;
+    
+    return (cfp->iseq)
+	/* NOTE: for now sourceline returns a single int. In the
+	   future it might return an array of ints.
+	*/
+	? rb_ary_new3(1, INT2FIX(rb_vm_get_sourceline(cfp)))
+	: Qnil;
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#stack_size  -> Fixnum;
+ *
+ *  Returns a count of the number of frames including the current one. 
+ *  ThreadFrame#prev(ThreadFrame#stack_size) = nil
+ *  ThreadFrame#prev(ThreadFrame#stack_size-1) = top frame
+ *  
+ * 
+ */
+static VALUE
+frame_stack_size(VALUE klass)
+{
+    FRAME_SETUP ;
+    return INT2FIX(frame_stack_size_internal(tf->cfp, tf->th));
+}
+
+/* 
+   See the above frame_stack_size comment for what's going on here.
+*/
+static int
+frame_stack_size_internal(rb_control_frame_t *cfp, rb_thread_t *th)
+{
+    int n;
+    for ( n = 0; 
+	  !RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(th, cfp);
+	  cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp)) {
+	n++;
+	if (VM_FRAME_TYPE(cfp) == VM_FRAME_MAGIC_FINISH) {
+	    cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp);
+	    if (RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(th, cfp))
+		break;
+	}
+    }
+    return n;
+}
+
+/*
+ *  call-seq:
+ *     RubyVM::ThreadFrame#thread   -> thread
+ *
+ *  Returns the thread object for the thread frame.
+ */
+static VALUE
+frame_thread(VALUE klass)
+{
+    FRAME_SETUP ;
+    return tf->th->self;
+}
+
+/* Extracted from vm_dump.c. Would be nice to have this routine put there
+   and used in both places. */
+static const char *
+frame_magic2str(rb_control_frame_t *cfp) 
+{
+    switch (VM_FRAME_TYPE(cfp)) {
+      case VM_FRAME_MAGIC_TOP:
+	return "TOP";
+      case VM_FRAME_MAGIC_METHOD:
+	return "METHOD";
+      case VM_FRAME_MAGIC_CLASS:
+	return "CLASS";
+      case VM_FRAME_MAGIC_BLOCK:
+	return "BLOCK";
+      case VM_FRAME_MAGIC_FINISH:
+	return "FINISH";
+      case VM_FRAME_MAGIC_CFUNC:
+	return "CFUNC";
+      case VM_FRAME_MAGIC_PROC:
+	return "PROC";
+      case VM_FRAME_MAGIC_LAMBDA:
+	return "LAMBDA";
+      case VM_FRAME_MAGIC_IFUNC:
+	return "IFUNC";
+      case VM_FRAME_MAGIC_EVAL:
+	return "EVAL";
+      case 0:
+	return "------";
+      default:
+	return "(none)";
+    }
+    /* NOTREACHED */
+    return "?";
+}
+
+/*
+ *  call-seq:
+ *     ThreadFrame#type  -> String 
+ * 
+ * Returns the kind of frame. Basically interprets VM_FRAME_MAGIC for
+ * tf->cfp->flag
+ */
+static VALUE
+frame_type(VALUE klass)
+{
+    FRAME_SETUP ;			
+    return rb_str_new2(frame_magic2str(tf->cfp));
+}
+
+void
+Init_Frame(void)
+{
+    /* Additions to RubyVM */
+    rb_cFrame = rb_define_class_under(rb_cRubyVM, "Frame", rb_cObject);
+    rb_define_method(rb_cThread, "threadframe", frame_threadframe, 0);
+
+    /* RubyVM::Frame */
+    rb_define_alloc_func(rb_cFrame, frame_alloc);
+
+    rb_define_method(rb_cFrame, "invalid?", frame_invalid, 0);
+
+    rb_define_method(rb_cFrame, "binding", frame_binding, 0);
+    rb_define_method(rb_cFrame, "flag", frame_flag, 0);
+    rb_define_method(rb_cFrame, "initialize", frame_initialize, 1);
+    rb_define_method(rb_cFrame, "iseq", frame_iseq, 0);
+    rb_define_method(rb_cFrame, "method", frame_method, 0);
+    rb_define_method(rb_cFrame, "next", frame_next, 0);
+    rb_define_method(rb_cFrame, "pc_offset", frame_pc_offset, 0);
+    rb_define_method(rb_cFrame, "prev", frame_prev, -1);
+    rb_define_method(rb_cFrame, "proc", frame_proc, 0);
+    rb_define_method(rb_cFrame, "return_stop=", frame_return_stop_set, 1);
+    rb_define_method(rb_cFrame, "return_stop?", frame_is_return_stop, 0);
+    rb_define_method(rb_cFrame, "self", frame_self, 0);
+#ifdef FINISHED
+    rb_define_method(rb_cFrame, "source_container", 
+		     frame_source_container, 0);
+    rb_define_method(rb_cFrame, "source_location", 
+		     frame_source_location, 0);
+#endif
+
+    /* sp[] and sp[]= would be neater, but that would require making sp an
+       object which I am not sure I want to do.
+     */
+    rb_define_method(rb_cFrame, "sp_set", frame_sp_set, 2);
+    rb_define_method(rb_cFrame, "sp_size", frame_sp_size, 0);
+
+    /* I think I like the more explicit stack_size over size or length. */
+    rb_define_method(rb_cFrame, "stack_size", 
+		     frame_stack_size, 0);
+
+    rb_define_method(rb_cFrame, "thread", frame_thread, 0);
+    rb_define_method(rb_cFrame, "trace_off?", frame_is_trace_off, 0);
+    rb_define_method(rb_cFrame, "trace_off=", frame_trace_off_set, 1);
+    rb_define_method(rb_cFrame, "type", frame_type, 0);
+
+    rb_define_method(rb_cFrame, "equal?", 
+		     frame_equal, 1);
+
+    rb_eThreadFrameError = rb_define_class("FrameError", 
+					   rb_eStandardError);
+
+    rb_define_singleton_method(rb_cFrame, "prev", frame_s_prev, -1);
+    rb_define_singleton_method(rb_cFrame, "current", frame_s_current, 0);
+
+    
+}
diff --git a/include/ruby/ruby.h b/include/ruby/ruby.h
index 2f97b33..2496dc1 100644
--- a/include/ruby/ruby.h
+++ b/include/ruby/ruby.h
@@ -1318,6 +1318,11 @@ RUBY_EXTERN VALUE rb_eMathDomainError;
 
 RUBY_EXTERN VALUE rb_stdin, rb_stdout, rb_stderr;
 
+/* in vm_method.c, and proc.c */
+RUBY_EXTERN VALUE rb_method_alias_count(VALUE);
+RUBY_EXTERN VALUE rb_method_original_id(VALUE self);
+RUBY_EXTERN VALUE rb_method_type(VALUE self);
+
 static inline VALUE
 rb_class_of(VALUE obj)
 {
@@ -1481,6 +1486,12 @@ int ruby_vsnprintf(char *str, size_t n, char const *fmt, va_list ap);
 #include "ruby/subst.h"
 #endif
 
+struct origarg {
+    int argc;
+    char **argv;
+    char *os_startup_dir;
+};
+
 #if defined(__cplusplus)
 #if 0
 { /* satisfy cc-mode */
diff --git a/inits.c b/inits.c
index 73b9eb4..c0a415e 100644
--- a/inits.c
+++ b/inits.c
@@ -56,6 +56,7 @@ rb_call_inits(void)
     CALL(VM);
     CALL(ISeq);
     CALL(Thread);
+    CALL(Frame);
     CALL(Cont);
     CALL(Rational);
     CALL(Complex);
diff --git a/iseq.c b/iseq.c
index 7380663..78fba90 100644
--- a/iseq.c
+++ b/iseq.c
@@ -90,7 +90,7 @@ iseq_free(void *ptr)
     RUBY_FREE_LEAVE("iseq");
 }
 
-static void
+void
 iseq_mark(void *ptr)
 {
     RUBY_MARK_ENTER("iseq");
@@ -122,6 +122,23 @@ iseq_mark(void *ptr)
     RUBY_MARK_LEAVE("iseq");
 }
 
+/* 
+ * This routine is here to allow an external C extension to create a
+ * RubyVM::InstructionSequence object sequence from its own C pointer
+ * of type rb_iseq_t *. For example, the rb-threadframe uses this
+ * routine to implement Method#iseq and Proc#iseq.
+ */
+VALUE
+iseq_alloc_shared(VALUE klass)
+{
+    VALUE volatile obj;
+    rb_iseq_t *iseq;
+
+    obj = Data_Make_Struct(klass, rb_iseq_t, iseq_mark, NULL, iseq);
+    MEMZERO(iseq, rb_iseq_t, 1);
+    return obj;
+}
+
 static size_t
 iseq_memsize(const void *ptr)
 {
@@ -282,13 +299,17 @@ prepare_iseq_build(rb_iseq_t *iseq,
 }
 
 static VALUE
-cleanup_iseq_build(rb_iseq_t *iseq)
+cleanup_iseq_build(rb_iseq_t *iseq, VALUE type, VALUE src, int saving_iseq)
 {
     struct iseq_compile_data *data = iseq->compile_data;
     VALUE err = data->err_info;
-    iseq->compile_data = 0;
-    compile_data_free(data);
-
+    if (0 == saving_iseq) {
+	iseq->compile_data = 0;
+	compile_data_free(data);
+    } else if (ISEQ_TYPE_EVAL == type) {
+	iseq->source = src;
+    }
+    
     if (RTEST(err)) {
 	rb_funcall2(err, rb_intern("set_backtrace"), 1, &iseq->filename);
 	rb_exc_raise(err);
@@ -376,14 +397,14 @@ VALUE
 rb_iseq_new(NODE *node, VALUE name, VALUE filename, VALUE filepath,
 	    VALUE parent, enum iseq_type type)
 {
-    return rb_iseq_new_with_opt(node, name, filename, filepath, INT2FIX(0), parent, type,
+    return rb_iseq_new_with_opt(node, name, filename, filepath, INT2FIX(0), parent, type, Qnil,
 				&COMPILE_OPTION_DEFAULT);
 }
 
 VALUE
 rb_iseq_new_top(NODE *node, VALUE name, VALUE filename, VALUE filepath, VALUE parent)
 {
-    return rb_iseq_new_with_opt(node, name, filename, filepath, INT2FIX(0), parent, ISEQ_TYPE_TOP,
+    return rb_iseq_new_with_opt(node, name, filename, filepath, INT2FIX(0), parent, ISEQ_TYPE_TOP, Qnil,
 				&COMPILE_OPTION_DEFAULT);
 }
 
@@ -393,34 +414,85 @@ rb_iseq_new_main(NODE *node, VALUE filename, VALUE filepath)
     rb_thread_t *th = GET_THREAD();
     VALUE parent = th->base_block->iseq->self;
     return rb_iseq_new_with_opt(node, rb_str_new2("<main>"), filename, filepath, INT2FIX(0),
-				parent, ISEQ_TYPE_MAIN, &COMPILE_OPTION_DEFAULT);
+				parent, ISEQ_TYPE_MAIN, Qnil, 
+				&COMPILE_OPTION_DEFAULT);
+}
+
+/* A debugger or similar introspection tool needs to be able to find
+ * all instruction sequences and access them. We facilitate this by
+ * adding the following behavior, analogous to SCRIPT_LINES__ for
+ * capturing source-code lines.
+ * 
+ * If SCRIPT_ISEQS__ is defined and is a hash, then every time a new
+ * instruction sequence is added, it is accessible from SCRIPT_ISEQS__
+ * using the "filename" as a key.
+ * 
+ * Similarly, if ISEQS__ is defined and is a hash, then every time a
+ * new instruction sequence is added, it is accessible from ISEQS__
+ * using its iseq_name as a key.  
+ */
+static int
+update_file_iseq(VALUE filename, VALUE iseq_name, VALUE iseq)
+{
+    ID hash_id;
+    int rc = 0;
+    CONST_ID(hash_id, "SCRIPT_ISEQS__");
+    if (rb_const_defined_at(rb_cObject, hash_id) && 
+	rb_safe_level() < 4) {
+	VALUE hash = rb_const_get_at(rb_cObject, hash_id);
+	rc = 1;
+	if (TYPE(hash) == T_HASH) {
+	    VALUE iseqs = rb_hash_aref(hash, filename);
+	    if (TYPE(iseqs) == T_ARRAY)
+		rb_ary_push(iseqs, iseq);
+	    else
+		rb_hash_aset(hash, filename, rb_ary_new3(1, iseq));
+	}
+    }
+    CONST_ID(hash_id, "ISEQS__");
+    if (rb_const_defined_at(rb_cObject, hash_id) &&
+	rb_safe_level() < 4) {
+	VALUE hash = rb_const_get_at(rb_cObject, hash_id);
+	rc = 1;
+	if (TYPE(hash) == T_HASH) {
+	    VALUE iseqs = rb_hash_aref(hash, iseq_name);
+	    if (TYPE(iseqs) == T_ARRAY)
+		rb_ary_push(iseqs, iseq);
+	    else
+		rb_hash_aset(hash, iseq_name, rb_ary_new3(1, iseq));
+	}
+    }
+    return rc;
 }
 
 static VALUE
 rb_iseq_new_with_bopt_and_opt(NODE *node, VALUE name, VALUE filename, VALUE filepath, VALUE line_no,
-				VALUE parent, enum iseq_type type, VALUE bopt,
-				const rb_compile_option_t *option)
+			      VALUE parent, enum iseq_type type, VALUE bopt,
+			      VALUE src,
+			      const rb_compile_option_t *option)
 {
     rb_iseq_t *iseq;
     VALUE self = iseq_alloc(rb_cISeq);
+    int saving_iseq;
 
     GetISeqPtr(self, iseq);
     iseq->self = self;
 
     prepare_iseq_build(iseq, name, filename, filepath, line_no, parent, type, bopt, option);
     rb_iseq_compile_node(self, node);
-    cleanup_iseq_build(iseq);
+    saving_iseq = update_file_iseq(filename, name, self);
+    cleanup_iseq_build(iseq, type, src, saving_iseq);
     return self;
 }
 
 VALUE
 rb_iseq_new_with_opt(NODE *node, VALUE name, VALUE filename, VALUE filepath, VALUE line_no,
-		     VALUE parent, enum iseq_type type,
+		     VALUE parent, enum iseq_type type, VALUE src,
 		     const rb_compile_option_t *option)
 {
     /* TODO: argument check */
     return rb_iseq_new_with_bopt_and_opt(node, name, filename, filepath, line_no, parent, type,
-					   Qfalse, option);
+					 Qfalse, src, option);
 }
 
 VALUE
@@ -429,7 +501,7 @@ rb_iseq_new_with_bopt(NODE *node, VALUE name, VALUE filename, VALUE filepath, VA
 {
     /* TODO: argument check */
     return rb_iseq_new_with_bopt_and_opt(node, name, filename, filepath, line_no, parent, type,
-					   bopt, &COMPILE_OPTION_DEFAULT);
+                                         bopt, Qnil, &COMPILE_OPTION_DEFAULT);
 }
 
 #define CHECK_ARRAY(v)   rb_convert_type((v), T_ARRAY, "Array", "to_ary")
@@ -450,6 +522,7 @@ iseq_load(VALUE self, VALUE data, VALUE parent, VALUE opt)
     rb_iseq_t *iseq;
     rb_compile_option_t option;
     int i = 0;
+    int saving_iseq = 0;
 
     /* [magic, major_version, minor_version, format_type, misc,
      *  name, filename, line_no,
@@ -514,11 +587,28 @@ iseq_load(VALUE self, VALUE data, VALUE parent, VALUE opt)
 		       parent, (enum iseq_type)iseq_type, 0, &option);
 
     rb_iseq_build_from_ary(iseq, locals, args, exception, body);
+    saving_iseq = update_file_iseq(filename, name, self);
 
-    cleanup_iseq_build(iseq);
+    cleanup_iseq_build(iseq, (enum iseq_type)iseq_type, body, saving_iseq);
     return iseqval;
 }
 
+/* 
+ *  call-seq:
+ *  RubyVM::InstructionSequence#arity -> Fixnum
+ *
+ *  Returns the number of arguments that would not be ignored.
+ *  See Ruby 1.9 proc_arity of proc.c
+ */
+VALUE
+rb_iseq_arity(VALUE iseqval)
+{
+    rb_iseq_t *iseq;
+    if (Qnil == iseqval) return Qnil;
+    GetISeqPtr(iseqval, iseq);
+    return (iseq) ? INT2FIX(get_iseq_arity(iseq)) : Qnil;
+}
+
 static VALUE
 iseq_s_load(int argc, VALUE *argv, VALUE self)
 {
@@ -559,11 +649,11 @@ rb_iseq_compile_with_option(VALUE src, VALUE file, VALUE filepath, VALUE line, V
     if (th->base_block && th->base_block->iseq) {
 	return rb_iseq_new_with_opt(node, th->base_block->iseq->name,
 				    file, filepath, line, th->base_block->iseq->self,
-				    ISEQ_TYPE_EVAL, &option);
+				    ISEQ_TYPE_EVAL, Qnil, &option);
     }
     else {
 	return rb_iseq_new_with_opt(node, rb_str_new2("<compiled>"), file, filepath, line, Qfalse,
-				    ISEQ_TYPE_TOP, &option);
+				    ISEQ_TYPE_TOP, Qnil, &option);
     }
 }
 
@@ -609,7 +699,7 @@ iseq_s_compile_file(int argc, VALUE *argv, VALUE self)
     make_compile_option(&option, opt);
     return rb_iseq_new_with_opt(node, rb_str_new2("<main>"), file,
 				rb_realpath_internal(Qnil, file, 1), line, Qfalse,
-				ISEQ_TYPE_TOP, &option);
+				ISEQ_TYPE_TOP, Qnil, &option);
 }
 
 static VALUE
@@ -655,9 +745,13 @@ iseq_inspect(VALUE self)
         return rb_sprintf("#<%s: uninitialized>", rb_obj_classname(self));
     }
 
-    return rb_sprintf("<%s:%s@%s>",
-                      rb_obj_classname(self),
-		      RSTRING_PTR(iseq->name), RSTRING_PTR(iseq->filename));
+    if (ISEQ_TYPE_TOP == iseq->type)
+	return rb_sprintf("<%s:%s>",
+			  rb_obj_classname(self), RSTRING_PTR(iseq->name));
+    else
+	return rb_sprintf("<%s:%s@%s>",
+			  rb_obj_classname(self),
+			  RSTRING_PTR(iseq->name), RSTRING_PTR(iseq->filename));
 }
 
 static
@@ -727,6 +821,18 @@ find_prev_line_no(rb_iseq_t *iseqdat, unsigned long pos)
     return 0;
 }
 
+/**
+ * Return String used in the creation of this instruction sequence. If none
+ * recorded, 0 (or false) is returned.
+ */
+VALUE
+rb_iseq_source(VALUE self)
+{
+    rb_iseq_t *iseq = iseq_check(self);
+    rb_secure(1);
+    return iseq->source;
+}
+
 static VALUE
 insn_operand_intern(rb_iseq_t *iseq,
 		    VALUE insn, int op_no, VALUE op,
@@ -1493,17 +1599,154 @@ rb_iseq_build_for_ruby2cext(
     return iseqval;
 }
 
+/* 
+ * call-seq:
+ *     RubyVM::InstructionSequence#name -> String
+ * 
+ *  Returns the name if the instruction sequence.
+ */
+VALUE
+iseq_name(VALUE iseqval)
+{
+    rb_iseq_t *iseq;
+    GetISeqPtr(iseqval, iseq);
+    return(iseq->name);
+}
+
+/* 
+ * call-seq:
+ *     RubyVM::InstructionSequence#offsetlines -> Hash[Fixnum] -> [Fixnum]
+ * 
+ * Returns a hash. The keys in the hash form the VM offsets of the
+ * instructions.  The value of the hash for a given offset is a list
+ * of line numbers associated with that offset.
+ */
+VALUE iseq_offsetlines(VALUE iseqval)
+{
+    rb_iseq_t *iseq;
+    VALUE offsetlines = rb_hash_new();
+    unsigned long i, size;
+    struct iseq_insn_info_entry *table;
+   
+    GetISeqPtr(iseqval, iseq);
+    
+    size = iseq->insn_info_size;
+    table = iseq->insn_info_table;
+
+    for (i = 0; i < size; i++) {
+	VALUE ary = rb_ary_new2(1);
+	rb_ary_push(ary, INT2FIX(table[i].line_no));
+	rb_hash_aset(offsetlines, INT2FIX(table[i].position), ary);
+    }
+    return offsetlines;
+}
+
+/* 
+ * call-seq:
+ *     RubyVM::InstructionSequence#offset2lines(offset) -> [Fixnum]
+ * 
+ * Returns an Array or nil. If offset is found then return the list of
+ * lines associated with that offset. If the offset isn't found return nil.
+ */
+VALUE iseq_offset2lines(VALUE iseqval, VALUE offsetval)
+{
+    rb_iseq_t *iseq;
+   
+    GetISeqPtr(iseqval, iseq);
+    
+    if (FIXNUM_P(offsetval)) {
+	unsigned long i, size;
+	int offset = FIX2INT(offsetval);
+	struct iseq_insn_info_entry *table;
+
+	size = iseq->insn_info_size;
+	table = iseq->insn_info_table;
+
+	for (i = 0; i < size; i++) {
+	    if (table[i].position == offset) {
+		VALUE ary = rb_ary_new2(1);
+		rb_ary_push(ary, INT2FIX(table[i].line_no));
+		return ary;
+	    }
+	}
+    }
+    return Qnil;
+}
+
+#define ISEQ_FIELD_METHOD(FIELD)		\
+static VALUE					\
+iseq_##FIELD(VALUE iseqval)			\
+{						\
+  rb_iseq_t *iseq;				\
+  if (Qnil == iseqval) return Qnil;		\
+  GetISeqPtr(iseqval, iseq);			\
+  return iseq->FIELD;				\
+}
+
+ISEQ_FIELD_METHOD(orig) ;
+ISEQ_FIELD_METHOD(self) ;
+ISEQ_FIELD_METHOD(type) ;
+
+#define ISEQ_INT_FIELD_METHOD(FIELD)		\
+extern VALUE					\
+iseq_##FIELD(VALUE iseqval)			\
+{						\
+  rb_iseq_t *iseq;				\
+  GetISeqPtr(iseqval, iseq);			\
+  return INT2FIX(iseq->FIELD);			\
+}
+
+ISEQ_INT_FIELD_METHOD(arg_block) ;
+ISEQ_INT_FIELD_METHOD(arg_opts) ;
+ISEQ_INT_FIELD_METHOD(arg_post_len) ;
+ISEQ_INT_FIELD_METHOD(arg_rest) ;
+ISEQ_INT_FIELD_METHOD(arg_simple) ;
+ISEQ_INT_FIELD_METHOD(argc) ;
+ISEQ_INT_FIELD_METHOD(iseq_size) ;
+ISEQ_INT_FIELD_METHOD(klass) ;
+ISEQ_INT_FIELD_METHOD(line_no) ;
+ISEQ_INT_FIELD_METHOD(local_size) ;
+ISEQ_INT_FIELD_METHOD(local_table_size) ;
+
 void
 Init_ISeq(void)
 {
     /* declare ::RubyVM::InstructionSequence */
     rb_cISeq = rb_define_class_under(rb_cRubyVM, "InstructionSequence", rb_cObject);
     rb_define_alloc_func(rb_cISeq, iseq_alloc);
+    rb_define_method(rb_cISeq, "arg_block",        iseq_arg_block, 0) ;
+    rb_define_method(rb_cISeq, "arg_opts",         iseq_arg_opts, 0) ;
+    rb_define_method(rb_cISeq, "arg_post_len",     iseq_arg_post_len, 0) ;
+    rb_define_method(rb_cISeq, "arg_rest",         iseq_arg_rest, 0) ;
+    rb_define_method(rb_cISeq, "arg_simple",       iseq_arg_simple, 0) ;
+    rb_define_method(rb_cISeq, "argc",             iseq_argc, 0) ;
+#ifdef FINISHED
+    rb_define_method(rb_cISeq, "compile_options",  iseq_compile_options, 0) ;
+    rb_define_method(rb_cISeq, "equal?",           iseq_equal, 1) ;
+    rb_define_method(rb_cISeq, "line_range",       iseq_line_range, 0) ;
+    rb_define_method(rb_cISeq, "local_iseq",       iseq_local_iseq, 0) ;
+    rb_define_method(rb_cISeq, "local_name",       iseq_local_name, 1) ;
+    rb_define_method(rb_cISeq, "parent",           iseq_parent, 0) ;
+#endif
+    rb_define_method(rb_cISeq, "iseq_size",        iseq_iseq_size, 0) ;
+    rb_define_method(rb_cISeq, "klass",            iseq_klass, 0) ;
+    rb_define_method(rb_cISeq, "lineno",           iseq_line_no, 0) ;
+    rb_define_method(rb_cISeq, "local_size",       iseq_local_size, 0) ;
+    rb_define_method(rb_cISeq, "local_table_size", iseq_local_table_size, 0) ;
+    rb_define_method(rb_cISeq, "name",             iseq_name, 0) ;
+    rb_define_method(rb_cISeq, "offset2lines",     iseq_offset2lines, 1) ;
+    rb_define_method(rb_cISeq, "offsetlines",      iseq_offsetlines, 0) ;
+    rb_define_method(rb_cISeq, "orig",             iseq_orig, 0) ;
+    rb_define_method(rb_cISeq, "self",             iseq_self, 0) ;
+    rb_define_method(rb_cISeq, "type",             iseq_type, 0) ;
+    rb_define_method(rb_cISeq, "iseq_size",        iseq_iseq_size, 0) ;
     rb_define_method(rb_cISeq, "inspect", iseq_inspect, 0);
+    rb_define_method(rb_cISeq, "arity",   rb_iseq_arity, 0);
     rb_define_method(rb_cISeq, "disasm", rb_iseq_disasm, 0);
     rb_define_method(rb_cISeq, "disassemble", rb_iseq_disasm, 0);
     rb_define_method(rb_cISeq, "to_a", iseq_to_a, 0);
     rb_define_method(rb_cISeq, "eval", iseq_eval, 0);
+    rb_define_method(rb_cISeq, "source", rb_iseq_source, 0);
 
 #if 0 /* TBD */
     rb_define_method(rb_cISeq, "marshal_dump", iseq_marshal_dump, 0);
diff --git a/iseq.h b/iseq.h
index beeacbb..ab86428 100644
--- a/iseq.h
+++ b/iseq.h
@@ -26,10 +26,14 @@ VALUE rb_iseq_build_from_ary(rb_iseq_t *iseq, VALUE locals, VALUE args,
 VALUE rb_iseq_load(VALUE data, VALUE parent, VALUE opt);
 VALUE rb_iseq_parameters(const rb_iseq_t *iseq, int is_proc);
 struct st_table *ruby_insn_make_insn_table(void);
+VALUE iseq_alloc_shared(VALUE klass);
 
 /* proc.c */
 rb_iseq_t *rb_method_get_iseq(VALUE body);
 rb_iseq_t *rb_proc_get_iseq(VALUE proc, int *is_proc);
+int method_arity(VALUE);
+int get_iseq_arity(rb_iseq_t *iseq);
+VALUE rb_binding_frame_new(void *vth, void *vcfp);
 
 struct rb_compile_option_struct {
     int inline_const_cache;
@@ -118,6 +122,14 @@ enum defined_type {
     DEFINED_FUNC
 };
 
+struct METHOD {
+    VALUE recv;
+    VALUE rclass;
+    ID id;
+    rb_method_entry_t *me;
+    struct unlinked_method_entry_list_entry *ume;
+};
+
 #if defined __GNUC__ && __GNUC__ >= 4
 #pragma GCC visibility pop
 #endif
diff --git a/load.c b/load.c
index 0ff4b60..4bfc157 100644
--- a/load.c
+++ b/load.c
@@ -301,11 +301,13 @@ rb_load_internal(VALUE fname, int wrap)
     if (state == 0) {
 	NODE *node;
 	VALUE iseq;
+	char iseq_name[MAXPATHLEN];
 
 	th->mild_compile_error++;
 	node = (NODE *)rb_load_file(RSTRING_PTR(fname));
 	loaded = TRUE;
-	iseq = rb_iseq_new_top(node, rb_str_new2("<top (required)>"), fname, rb_realpath_internal(Qnil, fname, 1), Qfalse);
+	snprintf(iseq_name, sizeof(iseq_name), "<top %s>", RSTRING_PTR(fname));
+	iseq = rb_iseq_new_top(node, rb_str_new2(iseq_name), fname, rb_realpath_internal(Qnil, fname, 1), Qfalse);
 	th->mild_compile_error--;
 	rb_iseq_eval(iseq);
     }
diff --git a/proc.c b/proc.c
index cb44b10..80de893 100644
--- a/proc.c
+++ b/proc.c
@@ -14,21 +14,12 @@
 #include "gc.h"
 #include "iseq.h"
 
-struct METHOD {
-    VALUE recv;
-    VALUE rclass;
-    ID id;
-    rb_method_entry_t *me;
-    struct unlinked_method_entry_list_entry *ume;
-};
-
 VALUE rb_cUnboundMethod;
 VALUE rb_cMethod;
 VALUE rb_cBinding;
 VALUE rb_cProc;
 
 static VALUE bmcall(VALUE, VALUE);
-static int method_arity(VALUE);
 
 /* Proc */
 
@@ -326,6 +317,28 @@ rb_binding_new(void)
     return bindval;
 }
 
+/*  Like rb_binding_new(), but we allow you to pass your own thread and
+ *  cfp rather than assume the current thread and current frame
+ *  pointer. 
+*/
+VALUE
+rb_binding_frame_new(void *vth, void *vcfp)
+{
+    rb_thread_t * th = (rb_thread_t *) vth;
+    rb_control_frame_t * cfp  = (rb_control_frame_t *) vcfp;
+    VALUE bindval = binding_alloc(rb_cBinding);
+    rb_binding_t *bind;
+    
+    if (cfp == 0) {
+        rb_raise(rb_eRuntimeError, 
+		 "Can't create Binding Object on top of Fiber.");
+    }
+
+    GetBindingPtr(bindval, bind);
+    bind->env = rb_vm_make_env_object(th, cfp);
+    return bindval;
+}
+
 /*
  *  call-seq:
  *     binding -> a_binding
@@ -631,6 +644,29 @@ proc_arity(VALUE self)
     return INT2FIX(arity);
 }
 
+int 
+get_iseq_arity(rb_iseq_t *iseq) 
+{
+    if (iseq) {
+	if (BUILTIN_TYPE(iseq) != T_NODE) {
+	    if (iseq->arg_rest < 0) {
+		return iseq->argc;
+	    }
+	    else {
+		return -(iseq->argc + 1 + iseq->arg_post_len);
+	    }
+	}
+	else {
+	    NODE *node = (NODE *)iseq;
+	    if (nd_type(node) == NODE_IFUNC && node->nd_cfnc == bmcall) {
+		/* method(:foo).to_proc.arity */
+		return method_arity(node->nd_tval);
+	    }
+	}
+    }
+    return -1;
+}
+
 int
 rb_proc_arity(VALUE self)
 {
@@ -1649,7 +1685,7 @@ method_arity_m(VALUE method)
     return INT2FIX(n);
 }
 
-static int
+int
 method_arity(VALUE method)
 {
     struct METHOD *data;
diff --git a/ruby.c b/ruby.c
index 3c97d01..799f2ca 100644
--- a/ruby.c
+++ b/ruby.c
@@ -116,10 +116,7 @@ static NODE *load_file(VALUE, const char *, int, struct cmdline_options *);
 static void forbid_setid(const char *, struct cmdline_options *);
 #define forbid_setid(s) forbid_setid((s), opt)
 
-static struct {
-    int argc;
-    char **argv;
-} origarg;
+struct origarg origarg;
 
 static void
 usage(const char *name)
@@ -1854,6 +1851,17 @@ ruby_sysinit(int *argc, char ***argv)
 #endif
     origarg.argc = *argc;
     origarg.argv = *argv;
+    origarg.os_startup_dir = malloc(MAXPATHLEN);
+#ifdef HAVE_GETCWD
+    if (!getcwd(origarg.os_startup_dir, MAXPATHLEN)) 
+        origarg.os_startup_dir[0] = '\0';
+#else
+    if (!getwd(origarg.os_startup_dir)) 
+        origarg.os_startup_dir[0] = '\0';
+#endif
+    origarg.os_startup_dir = realloc(origarg.os_startup_dir, 
+                                     strlen(origarg.os_startup_dir)+1);
+
 #if defined(USE_DLN_A_OUT)
     dln_argv0 = origarg.argv[0];
 #endif
diff --git a/test/debugger-ext/test_frame.rb b/test/debugger-ext/test_frame.rb
new file mode 100644
index 0000000..3c61a14
--- /dev/null
+++ b/test/debugger-ext/test_frame.rb
@@ -0,0 +1,123 @@
+require 'test/unit'
+
+class TestThread < Test::Unit::TestCase
+  def test_basic
+    assert_equal(RubyVM::Frame.new(Thread::current).thread, 
+                 RubyVM::Frame::current.thread)
+    assert_equal(RubyVM::Frame.new(Thread::current).thread, 
+                 Thread::current)
+    assert_equal(Thread::current.threadframe.thread, Thread::current)
+  end
+
+  def test_pc_offset
+    tf = RubyVM::Frame::current
+    offset_1 = tf.pc_offset
+    assert_equal(true, offset_1 > 0,
+                 "Expecting a positive integer pc offset, got %s" % offset_1)
+    offset_2 = tf.pc_offset
+    assert_equal(true, offset_2 > 0,
+                 "Expecting a positive integer pc offset, got %s" % offset_2)
+    assert_equal(true, offset_2 > offset_1,
+                 "Expecting second pc offset %s to be larger than the first %s" %
+                 [offset_2, offset_1])
+  end
+
+  # def test_sp
+  #   tf = RubyVM::Frame::current.prev
+  #   assert tf.sp(1)
+  #   tf.sp_set(1, 5)
+  #   assert_equal(5, tf.sp(1),
+  #                'chcking value of recently-set sp(1)')
+  # end
+
+  def test_fields(notused=nil)
+    tf = RubyVM::Frame::current
+    pc1 = tf.pc_offset
+    assert(pc1 > 0, 'Should be able to get a valid PC offset')
+    # pc_offset is dynamic - it changes constantly
+    pc2 = tf.pc_offset 
+    assert(pc2 > pc1, 'PC offset should have changed (for the greater)')
+    assert_equal('test_fields', tf.method)
+    assert_equal(self, tf.self)
+    ## FIXME:
+    ## assert_equal(0, tf.arity)
+    ## assert_equal(0, tf.argc)
+
+    # assert_raises IndexError do
+    #   x = tf.lfp(tf.iseq.local_size+1)
+    # end
+
+
+    tf_prev = tf.prev
+    assert(tf_prev.pc_offset > 0, "Should be valid PC offset for prev")
+  
+    # Is this too specific to test/unit.rb implementation details? 
+    assert_equal('run', tf_prev.method)
+
+    # 1.times creates a C frame.
+    1.times do 
+      tf = RubyVM::Frame::current
+      # FIXME:
+      # tup = tf.source_container
+      # tup[1] = File.basename(tup[1])
+      # assert_equal(['file', 'test-thread.rb'], tup)
+      assert_equal('block in test_fields', tf.method)
+      assert_equal('CFUNC', tf.prev.type)
+      assert_equal('times', tf.prev.method) 
+      assert_equal(self, tf.self)
+      ## FIXME:
+      ## assert_equal(0, tf.prev.arity, 'C arity should work nowadays' )
+      ## assert_equal(0, tf.prev.argc, 'C args is the same as arity')
+      assert_equal('test_fields', tf.prev.prev.method) 
+      ## FIXME:
+      ## assert_equal(0, tf.arity)
+      ## assert_equal(0, tf.argc)
+    end
+
+    ## FIXME
+    # # 1.upto also creates a C frame.
+    # 1.upto(1) do 
+    #   tf = RubyVM::Frame::current.prev
+    #   assert_equal('CFUNC', tf.type)
+    #   assert_equal(1, tf.arity, 'C arity should work nowadays' )
+    #   assert_equal(1, tf.argc)
+    # end
+
+    x  = lambda do |x,y| 
+      frame = RubyVM::Frame::current
+      assert_equal('block in test_fields', frame.method)
+      assert_equal('LAMBDA', frame.type)
+      ## FIXME:
+      ## assert_equal(x, tf.self)
+      ## assert_equal(2, frame.arity)
+      ## assert_equal(2, frame.argc)
+    end
+    x.call(x,2)
+
+    x  = Proc.new do |x, y|
+      frame = RubyVM::Frame::current
+      assert_equal('block in test_fields', frame.method)
+      ## FIXME
+      ## assert_equal(x, tf.self)
+    assert_equal('BLOCK', frame.type)
+    end
+    x.call(x,2)
+
+  end
+
+  def test_frame_equal
+    tf = RubyVM::Frame.current
+    tf2 = RubyVM::Frame.current
+    assert_equal(true,  tf.equal?(tf))
+    assert_equal(true,  tf.equal?(tf2))
+    tf2 = tf2.prev 
+    assert_equal(false, tf.equal?(tf2))
+    assert_raises TypeError do
+      tf.equal?(tf.iseq)
+    end
+  end
+end
+
+# We want to double-check we didn't mess up any pointers somewhere along
+# the line.
+at_exit { GC.start  }
diff --git a/test/debugger-ext/test_iseq.rb b/test/debugger-ext/test_iseq.rb
new file mode 100644
index 0000000..07a7e1f
--- /dev/null
+++ b/test/debugger-ext/test_iseq.rb
@@ -0,0 +1,26 @@
+require 'test/unit'
+class TestISeqSource < Test::Unit::TestCase
+  def test_source
+    iseq = RubyVM::InstructionSequence.new("x=1")
+    assert_equal  2, iseq.local_size
+    assert_equal  0, iseq.argc
+    assert_equal -1, iseq.arg_rest
+    assert_equal  0, iseq.arg_post_len
+    assert_equal -1, iseq.arg_block
+    assert_equal  1, iseq.arg_simple
+    assert_equal  1, iseq.local_table_size
+    assert_operator 0, :<=, iseq.iseq_size
+    assert_equal [1], iseq.offset2lines(0)
+    assert iseq.offsetlines.is_a?(Hash)
+    assert iseq.offsetlines.values.all?{|x| x == [1]}
+    assert iseq.disasm.is_a?(String)
+    assert_equal 1, iseq.eval
+    assert iseq.self.kind_of?(RubyVM::InstructionSequence)
+    # puts iseq.disasm
+    # puts iseq.name
+    # puts iseq.type
+    # puts iseq.klass
+    # puts iseq.lineno
+  end
+
+end
diff --git a/test/debugger-ext/test_iseq_hash.rb b/test/debugger-ext/test_iseq_hash.rb
new file mode 100644
index 0000000..303dcd3
--- /dev/null
+++ b/test/debugger-ext/test_iseq_hash.rb
@@ -0,0 +1,57 @@
+# See that setting ISEQS__ and SCRIPT_ISEQS__ saves 
+# RubyVM::Instruction_sequenses
+require 'test/unit'
+$SAFE = 0
+SCRIPT_ISEQS__ = {}
+ISEQS__ = {}
+class TestIseqAccess < Test::Unit::TestCase
+  ## FIXME: this doesn't work. Find out why.
+  # def setup
+  #   old_verbosity = $VERBOSE
+  #   $VERBOSE = nil
+  #   Kernel.const_set(:ISEQS__, {})
+  #   Kernel.const_set(:SCRIPT_ISEQS__, {})
+  #   $VERBOSE = old_verbosity
+  # end
+  # def teardown
+  #   old_verbosity = $VERBOSE
+  #   $VERBOSE = nil
+  #   Kernel.const_set(:ISEQS__, nil)
+  #   Kernel.const_set(:SCRIPT_ISEQS__, nil)
+  #   $VERBOSE = old_verbosity
+  # end
+
+  def test_basic
+   sizes=[]
+    [ISEQS__, SCRIPT_ISEQS__].each do |iseq_hash|
+      sizes << iseq_hash.size
+    end
+    # defining five should trigger five instruction sequence additions
+    # to ISEQS__ and SCRIPT_ISEQS__
+    # 
+    eval 'def five; 5 end'
+    # assert_equal sizes[0], sizes[1]
+    [SCRIPT_ISEQS__, ISEQS__].each do |iseq_hash|
+      # assert_equal true, iseq_hash.size > sizes.pop
+      assert_equal Hash, iseq_hash.class
+      a = iseq_hash.first
+      assert_equal Array, a.class
+      assert_equal RubyVM::InstructionSequence, iseq_hash.values[0][0].class
+    end
+    assert_equal RubyVM::InstructionSequence, ISEQS__["five"][0].class
+
+    # Check RubyVM::InstructionSequence#arity
+    eval 'def five; 5 end'
+    eval 'def add(a,b); a+b end'
+    eval 'def splat(*a); 5 end'
+# #   [['five', 0,], ['add', 2], ['splat', -1]].each do |meth, expect|
+    [['five', 0,], ['splat', -1]].each do |meth, expect|
+      assert_equal(expect, ISEQS__[meth][0].arity)
+    end
+
+    # Null ISEQS__ and SCRIPT_ISEQS__ but avoid: dynanmic constant warning
+    eval "ISEQS__ = nil; SCRIPT_ISEQS__ = nil"
+  end
+end
+# We want to double-check we didn't mess up any pointers somewhere.
+at_exit { GC.start  }
diff --git a/test/debugger-ext/test_os_startup.rb b/test/debugger-ext/test_os_startup.rb
new file mode 100644
index 0000000..5851c9a
--- /dev/null
+++ b/test/debugger-ext/test_os_startup.rb
@@ -0,0 +1,11 @@
+require 'test/unit'
+
+class TestThread < Test::Unit::TestCase
+  def test_os_startup
+    assert_equal(true, RubyVM::OS_ARGV.any?{|arg| $0 == arg},
+                 "program name args should contain #{$0}")
+    assert_operator(2, :<=, RubyVM::OS_ARGV.size, 
+                    "RubyVM::OS_ARGV should contain at least the Ruby interpeter and the program name")
+    assert RubyVM::OS_STARTUP_DIR
+  end    
+end
diff --git a/test/debugger-ext/test_thread.rb b/test/debugger-ext/test_thread.rb
new file mode 100644
index 0000000..89afb5e
--- /dev/null
+++ b/test/debugger-ext/test_thread.rb
@@ -0,0 +1,15 @@
+require 'test/unit'
+
+class TestThread < Test::Unit::TestCase
+  def test_thread_tracing
+    assert_equal(false, Thread.current.tracing?)
+    Thread.current.tracing = true
+    assert_equal(true, Thread.current.tracing?)
+    Thread.current.tracing = false
+    assert_equal(false, Thread.current.tracing?)
+  end    
+end
+
+# We want to double-check we didn't mess up any pointers somewhere along
+# the line.
+at_exit { GC.start  }
diff --git a/test/debugger-ext/testit.sh b/test/debugger-ext/testit.sh
new file mode 100755
index 0000000..14b5806
--- /dev/null
+++ b/test/debugger-ext/testit.sh
@@ -0,0 +1,11 @@
+#!/bin/bash
+if (( $# == 0 )) ; then
+    args=test_*.rb
+else
+    args=$*
+fi
+for t in $args ; do 
+    echo "===== $t ====="
+    ../../miniruby -I../../lib -I../.. $t
+    # gdb ../../miniruby
+done
diff --git a/thread.c b/thread.c
index 342d4fe..4106e47 100644
--- a/thread.c
+++ b/thread.c
@@ -4579,6 +4579,37 @@ thread_suppress_tracing(rb_thread_t *th, int ev, VALUE (*func)(VALUE, int), VALU
     return result;
 }
 
+
+/* 
+ *  call-seq:
+ *  Thread#tracing? -> bool
+ * 
+ *  Returns the value of the thread event-hook tracing.
+ */
+VALUE
+rb_thread_tracing(VALUE self)
+{
+    rb_thread_t *th;
+    GetThreadPtr(self, th);
+    return th->tracing ? Qtrue : Qfalse;
+}
+
+/* 
+ *  call-seq:
+ *  Thread#tracing= bool
+ * 
+ *  Sets the value of thread event-hook tracing.
+ */
+VALUE
+rb_thread_tracing_set(VALUE self, VALUE new_value)
+{
+    rb_thread_t *th;
+    GetThreadPtr(self, th);
+
+    th->tracing = RTEST(new_value) ? Qtrue : Qfalse;
+    return th->tracing;
+}
+
 /*
  *  call-seq:
  *     thr.backtrace    -> array
@@ -4700,6 +4731,10 @@ Init_Thread(void)
     rb_define_method(rb_cThread, "set_trace_func", thread_set_trace_func_m, 1);
     rb_define_method(rb_cThread, "add_trace_func", thread_add_trace_func_m, 1);
 
+    rb_define_method(rb_cThread, "tracing=",  rb_thread_tracing_set, 1);
+    rb_define_method(rb_cThread, "tracing?",  rb_thread_tracing, 0);
+
+
     /* init thread core */
     {
 	/* main thread setting */
@@ -4832,4 +4867,3 @@ rb_reset_coverages(void)
     GET_VM()->coverages = Qfalse;
     rb_remove_event_hook(update_coverage);
 }
-
diff --git a/vm.c b/vm.c
index e997afa..78b1c56 100644
--- a/vm.c
+++ b/vm.c
@@ -2070,6 +2070,8 @@ nsdr(void)
     return ary;
 }
 
+extern struct origarg origarg;
+
 void
 Init_VM(void)
 {
@@ -2082,6 +2084,21 @@ Init_VM(void)
     rb_undef_alloc_func(rb_cRubyVM);
     rb_undef_method(CLASS_OF(rb_cRubyVM), "new");
 
+    /** set RubyVM::OS_ARGV and RubyVM::OS_STARTUP_DIR */
+    rb_define_const(rb_cRubyVM, "OS_STARTUP_DIR", 
+		    strlen(origarg.os_startup_dir) > 0 ? 
+		    rb_str_new2(origarg.os_startup_dir) : Qnil);
+    {
+	int argc;
+	char **argv;
+	VALUE ary = rb_ary_new();
+	rb_define_const(rb_cRubyVM, "OS_ARGV", ary);
+	for (argc = origarg.argc, argv = origarg.argv; 
+	     argc > 0; argc--, argv++) {
+	    rb_ary_push(ary, rb_str_new2(*argv));
+	}
+    }
+
     /* ::VM::FrozenCore */
     fcore = rb_class_new(rb_cBasicObject);
     RBASIC(fcore)->flags = T_ICLASS;
diff --git a/vm_core.h b/vm_core.h
index 7211005..f11aeef 100644
--- a/vm_core.h
+++ b/vm_core.h
@@ -255,6 +255,23 @@ struct rb_iseq_struct {
 
     /* used at compile time */
     struct iseq_compile_data *compile_data;
+
+    /* Used to set a breakpoint at a VM instruction */
+    unsigned char *breakpoints; 
+
+    /* If this instruction sequence came from eval, the string of the
+       source as a String. */
+    VALUE source;
+
+    /* If we are saving tree nodes (a compile option), then tree_node
+       is the internal parse tree node representation for this
+       instruction sequence.
+    */
+    NODE *tree_node;
+    int in_use;  /* Reference count of number of times and instruction
+		    sequence is in use such as via thread_frame object
+		    access or is stored in ISEQS__ or SCRIPT_ISEQS.
+		  */
 };
 
 enum ruby_special_exceptions {
@@ -340,6 +357,9 @@ typedef struct {
     rb_iseq_t *block_iseq;	/* cfp[8] / block[3] */
     VALUE proc;			/* cfp[9] / block[4] */
     const rb_method_entry_t *me;/* cfp[10] */
+    short int tracing;          /* Bits to control per-frame event tracing. 
+				   See VM_FRAME_TRACE_xxx defines.
+				 */
 } rb_control_frame_t;
 
 typedef struct rb_block_struct {
@@ -406,6 +426,16 @@ typedef struct rb_thread_struct {
 
     int waiting_fd;
 
+    /* tracer */
+    rb_event_hook_t *event_hooks;
+    rb_event_flag_t event_flags;
+    int tracing;  /* 0 if not tracing. If less than 0, skip that many
+		     C call/return pairs */
+
+    /* misc */
+    int method_missing_reason;
+    int abort_on_exception;
+
     /* for rb_iterate */
     const rb_block_t *passed_block;
 
@@ -427,6 +457,14 @@ typedef struct rb_thread_struct {
     enum rb_thread_status status;
     int priority;
 
+    /* statistics data for profiler */
+    VALUE stat_insn_usage;
+
+    /* fiber */
+    VALUE fiber;
+    VALUE root_fiber;
+    rb_jmpbuf_t root_jmpbuf;
+
     native_thread_data_t native_thread_data;
     void *blocking_region_buffer;
 
@@ -470,22 +508,7 @@ typedef struct rb_thread_struct {
     jmp_buf machine_regs;
     int mark_stack_len;
 
-    /* statistics data for profiler */
-    VALUE stat_insn_usage;
-
-    /* tracer */
-    rb_event_hook_t *event_hooks;
-    rb_event_flag_t event_flags;
-    int tracing;
-
-    /* fiber */
-    VALUE fiber;
-    VALUE root_fiber;
-    rb_jmpbuf_t root_jmpbuf;
-
     /* misc */
-    int method_missing_reason;
-    int abort_on_exception;
 #ifdef USE_SIGALTSTACK
     void *altstack;
 #endif
@@ -500,7 +523,7 @@ VALUE rb_iseq_new(NODE*, VALUE, VALUE, VALUE, VALUE, enum iseq_type);
 VALUE rb_iseq_new_top(NODE *node, VALUE name, VALUE filename, VALUE filepath, VALUE parent);
 VALUE rb_iseq_new_main(NODE *node, VALUE filename, VALUE filepath);
 VALUE rb_iseq_new_with_bopt(NODE*, VALUE, VALUE, VALUE, VALUE, VALUE, enum iseq_type, VALUE);
-VALUE rb_iseq_new_with_opt(NODE*, VALUE, VALUE, VALUE, VALUE, VALUE, enum iseq_type, const rb_compile_option_t*);
+VALUE rb_iseq_new_with_opt(NODE*, VALUE, VALUE, VALUE, VALUE, VALUE, enum iseq_type, VALUE, const rb_compile_option_t*);
 VALUE rb_iseq_compile(VALUE src, VALUE file, VALUE line);
 VALUE rb_iseq_compile_with_option(VALUE src, VALUE file, VALUE filepath, VALUE line, VALUE opt);
 VALUE rb_iseq_disasm(VALUE self);
@@ -583,6 +606,10 @@ enum vm_special_object_type {
 
 #define VM_FRAME_TYPE(cfp) ((cfp)->flag & VM_FRAME_MAGIC_MASK)
 
+#define VM_FRAME_TRACE_RETURN 0x01  /* Call trace hook on return. */
+#define VM_FRAME_TRACE_OFF    0x02  /* Turn of event hook tracing in this frame
+				       and any frames created from this one. */
+
 /* other frame flag */
 #define VM_FRAME_FLAG_PASSED 0x0100
 
diff --git a/vm_eval.c b/vm_eval.c
index 6f2da3e..70ea0c7 100644
--- a/vm_eval.c
+++ b/vm_eval.c
@@ -1041,6 +1041,7 @@ eval_string_with_cref(VALUE self, VALUE src, VALUE scope, NODE *cref, const char
 
 	/* save new env */
 	GetISeqPtr(iseqval, iseq);
+	iseq->source = src;
 	if (bind && iseq->local_table_size > 0) {
 	    bind->env = rb_vm_make_env_object(th, th->cfp);
 	}
