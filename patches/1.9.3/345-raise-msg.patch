This patch provides a way to get the exception object on a "raise"
event in a trace hook. The exeception object passed as the "klass"
parameter in the hook callback.

Note that in a hook one can get the class via a binding from the frame
using eval('self.class', binding)

Another small but unrelated change here is to fill in some of the
missing event names in the case statement of routine get_event_name().

The test in this patch depends on 500-trace_func-mask.patch as it uses
clear_trace_func and set_trace_func with an event mask. The patch
could probably be rewritten so it doesn't need this dependency.

diff --git a/eval.c b/eval.c
index 3999ea5..b2c8aae 100644
--- a/eval.c
+++ b/eval.c
@@ -441,7 +441,12 @@ setup_exception(rb_thread_t *th, int tag, volatile VALUE mesg)
     rb_trap_restore_mask();
 
     if (tag != TAG_FATAL) {
-	EXEC_EVENT_HOOK(th, RUBY_EVENT_RAISE, th->cfp->self, 0, 0);
+        /* In a RAISE event, we store as the "class" parameter the
+           the optional message parameter which is likely to be of more
+           use. Given a binding, a trace hook can get the class via 
+           eval('self.class', binding)
+	 */
+        EXEC_EVENT_HOOK(th, RUBY_EVENT_RAISE, th->cfp->self, 0, mesg);
     }
 }
 
diff --git a/test/debugger-ext/test_tracefunc_raise.rb b/test/debugger-ext/test_tracefunc_raise.rb
new file mode 100644
index 0000000..d22674a
--- /dev/null
+++ b/test/debugger-ext/test_tracefunc_raise.rb
@@ -0,0 +1,26 @@
+require 'test/unit'
+
+# tests that we a trace hook has access to the runtime exception Object
+# when it is called through a raise event
+
+class TestTracefuncRaise < Test::Unit::TestCase
+
+  def test_basic
+    tuples = []
+    p = Proc.new { 
+      |event, file, lineno, mid, binding, klass|
+      tuples << klass
+    }
+    msg = 'this is a message'
+    set_trace_func(p, 0x0080)
+    begin ; x = 1/0; rescue; end
+    begin ; raise RuntimeError, msg; rescue; end
+    clear_trace_func
+    assert_equal(2, tuples.size, 
+                 "Wrong number of tuples captured #{tuples.inspect}")
+    assert_equal msg, tuples[1].message
+    assert_equal([ZeroDivisionError, RuntimeError], tuples.map{|t| t.class},
+                 "Mismatched tuples classes in #{tuples.inspect}")
+    
+  end
+end
diff --git a/test/ruby/test_settracefunc.rb b/test/ruby/test_settracefunc.rb
index d6c6d06..fd4a75c 100644
--- a/test/ruby/test_settracefunc.rb
+++ b/test/ruby/test_settracefunc.rb
@@ -220,7 +220,7 @@ class TestSetTraceFunc < Test::Unit::TestCase
      3: })
      4: begin
      5:   raise TypeError, "error"
-     6: rescue TypeError
+     6: rescue TypeError => $e
      7: end
      8: set_trace_func(nil)
     EOF
@@ -248,8 +248,7 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["c-return", 5, :set_backtrace, Exception],
                  events.shift)
-    assert_equal(["raise", 5, :test_raise, TestSetTraceFunc],
-                 events.shift)
+    assert_equal(["raise", 5, :test_raise, $e], events.shift)
     assert_equal(["c-return", 5, :raise, Kernel],
                  events.shift)
     assert_equal(["c-call", 6, :===, Module],
diff --git a/thread.c b/thread.c
index a965374..ad8d572 100644
--- a/thread.c
+++ b/thread.c
@@ -4593,6 +4593,12 @@ get_event_name(rb_event_flag_t event)
 	return "c-return";
       case RUBY_EVENT_RAISE:
 	return "raise";
+      case RUBY_EVENT_SWITCH:
+        return "switch";
+      case RUBY_EVENT_COVERAGE:
+        return "coverage";
+      case RUBY_EVENT_VM:
+        return "vm";
       default:
 	return "unknown";
     }
@@ -4610,11 +4616,18 @@ call_trace_proc(VALUE args, int tracing)
     ID id = 0;
     VALUE klass = 0;
 
-    if (p->klass != 0) {
+    if (p->event == RUBY_EVENT_RAISE) {
+        /* rb_thread_method_and_id() wants a place to store a klass
+	   value which subsequently we will not use.  */
+        VALUE junk_klass; 
+	rb_thread_method_id_and_class(GET_THREAD(), &id, &junk_klass);
+	/* When the event is RUBY_EVENT_RAISE, we have stored the raise
+	   message as the trace-hook klass parameter. */ 
+	klass = p->klass;
+    } else if (p->klass != 0) {
 	id = p->id;
 	klass = p->klass;
-    }
-    else {
+    } else {
 	rb_thread_method_id_and_class(p->th, &id, &klass);
     }
     if (id == ID_ALLOCATOR)
