Adds events "send", "leave", "yield", and "insn".  Ruby "yield" context switching triggers these.
"insn" is for instruction stepping.

index 5eca96f..2e6efbe 100644
--- a/include/ruby/ruby.h
+++ b/include/ruby/ruby.h
@@ -1407,8 +1407,12 @@ int ruby_native_thread_p(void);
 #define RUBY_EVENT_C_CALL    0x0020
 #define RUBY_EVENT_C_RETURN  0x0040
 #define RUBY_EVENT_RAISE     0x0080
+#define RUBY_EVENT_INSN      0x0100
 #define RUBY_EVENT_BRKPT     0x0200
-#define RUBY_EVENT_ALL       0xffff
+#define RUBY_EVENT_SEND      0x0400
+#define RUBY_EVENT_LEAVE     0x0800
+#define RUBY_EVENT_YIELD     0x1000
+#define RUBY_EVENT_ALL       (0xffff & ~RUBY_EVENT_INSN)
 #define RUBY_EVENT_VM       0x10000
 #define RUBY_EVENT_SWITCH   0x20000
 #define RUBY_EVENT_COVERAGE 0x40000
diff --git a/test/ruby/test_settracefunc.rb b/test/ruby/test_settracefunc.rb
index fd4a75c..fdf7920 100644
--- a/test/ruby/test_settracefunc.rb
+++ b/test/ruby/test_settracefunc.rb
@@ -27,12 +27,16 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["line", 4, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 4, :test_c_call, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 4, :+, Fixnum],
                  events.shift)
     assert_equal(["c-return", 4, :+, Fixnum],
                  events.shift)
     assert_equal(["line", 5, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 5, :test_c_call, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 5, :set_trace_func, Kernel],
                  events.shift)
     assert_equal([], events)
@@ -54,24 +58,34 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["line", 4, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 4, :test_call, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 4, :method_added, self.class],
                  events.shift)
     assert_equal(["c-return", 4, :method_added, self.class],
                  events.shift)
     assert_equal(["line", 7, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 7, :test_call, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["call", 4, :add, self.class],
                  events.shift)
     assert_equal(["line", 5, :add, self.class],
                  events.shift)
+    assert_equal(["send", 5, :add, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 5, :+, Fixnum],
                  events.shift)
     assert_equal(["c-return", 5, :+, Fixnum],
                  events.shift)
     assert_equal(["return", 6, :add, self.class],
                  events.shift)
+    assert_equal(["leave", 6, :add, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["line", 8, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 8, :test_call, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 8, :set_trace_func, Kernel],
                  events.shift)
     assert_equal([], events)
@@ -88,9 +102,9 @@ class TestSetTraceFunc < Test::Unit::TestCase
      6:   end
      7: end
      8: x = Foo.new.bar
-     9: set_trace_func(nil)
+     9: clear_trace_func()
     EOF
-    assert_equal(["c-return", 3, :set_trace_func, Kernel],
+    assert_equal(["c-return", 3, :set_trace_func, Kernel], 
                  events.shift)
     assert_equal(["line", 4, __method__, self.class],
                  events.shift)
@@ -102,14 +116,20 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["line", 5, nil, nil],
                  events.shift)
+    assert_equal(["send", 5, nil, nil],
+                 events.shift)
     assert_equal(["c-call", 5, :method_added, Module],
                  events.shift)
     assert_equal(["c-return", 5, :method_added, Module],
                  events.shift)
     assert_equal(["end", 7, nil, nil],
                  events.shift)
+    assert_equal(["leave", 7, nil, nil],
+                 events.shift)
     assert_equal(["line", 8, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 8, :test_class, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 8, :new, Class],
                  events.shift)
     assert_equal(["c-call", 8, :initialize, BasicObject],
@@ -118,13 +138,19 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["c-return", 8, :new, Class],
                  events.shift)
+    assert_equal(["send", 8, :test_class, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["call", 5, :bar, Foo],
                  events.shift)
     assert_equal(["return", 6, :bar, Foo],
                  events.shift)
+    assert_equal(["leave", 6, :bar, TestSetTraceFunc::Foo],
+                 events.shift)
     assert_equal(["line", 9, __method__, self.class],
                  events.shift)
-    assert_equal(["c-call", 9, :set_trace_func, Kernel],
+    assert_equal(["send", 9, :test_class, TestSetTraceFunc],
+                 events.shift)
+    assert_equal(["c-call", 9, :clear_trace_func, Kernel],
                  events.shift)
     assert_equal([], events)
   end
@@ -132,7 +158,7 @@ class TestSetTraceFunc < Test::Unit::TestCase
   def test_return # [ruby-dev:38701]
     events = []
     eval <<-EOF.gsub(/^.*?: /, "")
-     1: set_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|
+     1: add_trace_func(Proc.new { |event, file, lineno, mid, binding, klass|
      2:   events << [event, lineno, mid, klass]
      3: })
      4: def foo(a)
@@ -143,32 +169,42 @@ class TestSetTraceFunc < Test::Unit::TestCase
      9: foo(false)
     10: set_trace_func(nil)
     EOF
-    assert_equal(["c-return", 3, :set_trace_func, Kernel],
-                 events.shift)
     assert_equal(["line", 4, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 4, :test_return, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 4, :method_added, self.class],
                  events.shift)
     assert_equal(["c-return", 4, :method_added, self.class],
                  events.shift)
     assert_equal(["line", 8, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 8, :test_return, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["call", 4, :foo, self.class],
                  events.shift)
     assert_equal(["line", 5, :foo, self.class],
                  events.shift)
     assert_equal(["return", 5, :foo, self.class],
                  events.shift)
+    assert_equal(["leave", 5, :foo, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["line", 9, :test_return, self.class],
                  events.shift)
+    assert_equal(["send", 9, :test_return, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["call", 4, :foo, self.class],
                  events.shift)
     assert_equal(["line", 5, :foo, self.class],
                  events.shift)
     assert_equal(["return", 7, :foo, self.class],
                  events.shift)
+    assert_equal(["leave", 7, :foo, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["line", 10, :test_return, self.class],
                  events.shift)
+    assert_equal(["send", 10, :test_return, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 10, :set_trace_func, Kernel],
                  events.shift)
     assert_equal([], events)
@@ -191,12 +227,16 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["line", 4, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 4, :test_return2, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 4, :method_added, self.class],
                  events.shift)
     assert_equal(["c-return", 4, :method_added, self.class],
                  events.shift)
     assert_equal(["line", 8, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 8, :test_return2, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["call", 4, :foo, self.class],
                  events.shift)
     assert_equal(["line", 5, :foo, self.class],
@@ -205,8 +245,12 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["return", 7, :foo, self.class],
                  events.shift)
+    assert_equal(["leave", 7, :foo, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["line", 9, :test_return2, self.class],
                  events.shift)
+    assert_equal(["send", 9, :test_return2, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 9, :set_trace_func, Kernel],
                  events.shift)
     assert_equal([], events)
@@ -230,6 +274,8 @@ class TestSetTraceFunc < Test::Unit::TestCase
                  events.shift)
     assert_equal(["line", 5, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 5, :test_raise, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 5, :raise, Kernel],
                  events.shift)
     assert_equal(["c-call", 5, :exception, Exception],
@@ -251,12 +297,18 @@ class TestSetTraceFunc < Test::Unit::TestCase
     assert_equal(["raise", 5, :test_raise, $e], events.shift)
     assert_equal(["c-return", 5, :raise, Kernel],
                  events.shift)
+    assert_equal(["send", 6, :test_raise, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 6, :===, Module],
                  events.shift)
     assert_equal(["c-return", 6, :===, Module],
                  events.shift)
+    assert_equal(["leave", 7, :test_raise, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["line", 8, __method__, self.class],
                  events.shift)
+    assert_equal(["send", 8, :test_raise, TestSetTraceFunc],
+                 events.shift)
     assert_equal(["c-call", 8, :set_trace_func, Kernel],
                  events.shift)
     assert_equal([], events)
@@ -272,17 +324,15 @@ class TestSetTraceFunc < Test::Unit::TestCase
      8: set_trace_func(nil)
     EOF
 
-    [["c-return", 3, :set_trace_func, Kernel],
-     ["line", 4, __method__, self.class],
-     ["c-call", 4, :any?, Enumerable],
-     ["c-call", 4, :each, Array],
-     ["line", 4, __method__, self.class],
-     ["c-return", 4, :each, Array],
-     ["c-return", 4, :any?, Enumerable],
-     ["line", 5, __method__, self.class],
-     ["c-call", 5, :set_trace_func, Kernel]].each{|e|
-      assert_equal(e, events.shift)
-    }
+    expected = [["line", 4, __method__, self.class],
+                ["c-call", 4, :any?, Enumerable],
+                ["c-call", 4, :each, Array],
+                ["line", 4, __method__, self.class],
+                ["c-return", 4, :any?, Enumerable],
+                ["line", 5, __method__, self.class],
+                ["c-call", 5, :set_trace_func, Kernel]]
+    events.each_with_index{|e, i|
+      assert_equal(e, events[i])}
   end
 
   def test_invalid_proc
@@ -319,9 +369,11 @@ class TestSetTraceFunc < Test::Unit::TestCase
     end
     th.join
 
-    [["c-return", 1, :set_trace_func, Thread, :set],
-     ["line", 2, __method__, self.class, :set],
-     ["c-call", 2, :add_trace_func, Thread, :set]].each do |e|
+    expected = [["c-return", 1, :set_trace_func, Thread, :set],
+                ["line", 2, __method__, self.class, :set],
+                ["send", 2, :test_thread_trace, TestSetTraceFunc, :set],
+                ["c-call", 2, :add_trace_func, Thread, :set]]
+    expected.each do |e|
       assert_equal(e, events[:set].shift)
     end
 
@@ -331,21 +383,29 @@ class TestSetTraceFunc < Test::Unit::TestCase
      ["c-return", 3, :inherited, Class],
      ["class", 3, nil, nil],
      ["line", 4, nil, nil],
+     ["send", 4, nil, nil],
      ["c-call", 4, :method_added, Module],
      ["c-return", 4, :method_added, Module],
      ["end", 7, nil, nil],
-     ["line", 8, __method__, self.class],
+     ["leave", 7, nil, nil],
+     ["line", 8, __method__, TestSetTraceFunc],
+     ["send", 8, :test_thread_trace, TestSetTraceFunc],
      ["c-call", 8, :new, Class],
      ["c-call", 8, :initialize, BasicObject],
      ["c-return", 8, :initialize, BasicObject],
      ["c-return", 8, :new, Class],
+     ["send", 8, :test_thread_trace, TestSetTraceFunc],
      ["call", 4, :foo, ThreadTraceInnerClass],
      ["line", 5, :foo, ThreadTraceInnerClass],
+     ["send", 5, :foo, ThreadTraceInnerClass],
      ["c-call", 5, :+, Fixnum],
      ["c-return", 5, :+, Fixnum],
      ["return", 6, :foo, ThreadTraceInnerClass],
+     ["leave", 6, :foo, ThreadTraceInnerClass],
      ["line", 9, __method__, self.class],
-     ["c-call", 9, :set_trace_func, Thread]].each do |e|
+     ["send", 9, __method__, self.class],
+     ["c-call", 9, :set_trace_func, Thread]
+    ].each do |e|
       [:set, :add].each do |type|
         assert_equal(e + [type], events[type].shift)
       end
@@ -368,9 +428,12 @@ class TestSetTraceFunc < Test::Unit::TestCase
 
     [["c-return", 5, :set_trace_func, Kernel],
      ["line", 6, __method__, self.class],
+     ["send", 6, :test_trace_defined_method, TestSetTraceFunc],
      ["call", 6, :foobar, FooBar],
+     ["leave", 1, :foobar, TestSetTraceFunc::FooBar],
      ["return", 6, :foobar, FooBar],
      ["line", 7, __method__, self.class],
+     ["send", 7, :test_trace_defined_method, TestSetTraceFunc],
      ["c-call", 7, :set_trace_func, Kernel]].each{|e|
       assert_equal(e, events.shift)
     }
diff --git a/thread.c b/thread.c
index f57e372..0dbd52d 100644
--- a/thread.c
+++ b/thread.c
@@ -4584,6 +4584,14 @@ get_event_name(rb_event_flag_t event)
 	return "c-return";
       case RUBY_EVENT_RAISE:
 	return "raise";
+      case RUBY_EVENT_INSN:
+        return "vm-insn";
+      case RUBY_EVENT_SEND:
+        return "send";
+      case RUBY_EVENT_LEAVE:
+        return "leave";
+      case RUBY_EVENT_YIELD:
+        return "yield";
       case RUBY_EVENT_SWITCH:
         return "switch";
       case RUBY_EVENT_COVERAGE:
diff --git a/tool/instruction.rb b/tool/instruction.rb
index 9dc7604..bf3b371 100755
--- a/tool/instruction.rb
+++ b/tool/instruction.rb
@@ -860,6 +860,16 @@ class RubyVM
       make_header_stack_pops insn
       make_header_temporary_vars insn
       #
+      case insn.name
+      when 'leave'
+        commit "  TRACE_LEAVE(#{insn.name});"
+      when 'send'
+        commit "  TRACE_SEND(#{insn.name});"
+      when 'invokeblock'
+        commit "  TRACE_YIELD(#{insn.name});"
+      else
+        commit "  TRACE_INSN(#{insn.name});"
+      end
       make_hader_debug insn
       make_header_pc insn
       make_header_popn insn
diff --git a/vm_exec.h b/vm_exec.h
index 7d4b540..899cde8 100644
--- a/vm_exec.h
+++ b/vm_exec.h
@@ -18,6 +18,51 @@ typedef unsigned long dindex_t;
 typedef rb_num_t GENTRY;
 typedef rb_iseq_t *ISEQ;
 
+#include "insns_info.inc"
+
+#if 0
+
+#define TRACE_INSN_SET_EXTRA_INFO(insn, var) do { var = Qnil; } while (0)
+
+#else
+
+#define TRACE_INSN_SET_EXTRA_INFO(insn, var) do { \
+  var = rb_ary_new2(insn_len(BIN(insn)) - 1); \
+  int trace_i__ = 0; \
+  while (trace_i__ < insn_len(BIN(insn)) - 1) { \
+    VALUE trace_push_val__ = Qnil; \
+    switch (insn_op_type(BIN(insn), trace_i__)) { \
+      case TS_VALUE: trace_push_val__ = GET_OPERAND(trace_i__ + 1); break; \
+      case TS_NUM: trace_push_val__ = INT2NUM(GET_OPERAND(trace_i__ + 1)); break \
+      case TS_LINDEX: trace_push_val__ = INT2NUM((lindex_t) (GET_LFP() - GET_OPEAND(trace_i__ + 1))); break; \
+      case TS_DINDEX: trace_push_val__ = INT2NUM((dindex_t) (GET_DFP() - GET_OPEAND(trace_i__ + 1))); break; \
+      case TS_ID: trace_push_val__ = ID2SYM(GET_OPERAND(trace_i__ + 1)); break; +    } \
+    if (!SPECIAL_CONST_P(trace_push_val__)) \
+      trace_push_val__ = rb_type(trace_push_val__) == T_STRING ? \
+        rb_str_new_cstr(RSTRING_PTR(trace_push_val__)) : Qnil; \
+    rb_ary_push(var, trace_push_val__); \
+    trace_i__++; \
+  } \
+} while (0)
+
+#endif
+
+#define TRACE_INSN(insn) do { \
+  EXEC_EVENT_HOOK(th, RUBY_EVENT_INSN, GET_SELF(), 0, 0); \
+} while (0)
+
+#define TRACE_SEND(insn) do { \
+  EXEC_EVENT_HOOK(th, RUBY_EVENT_SEND, GET_SELF(), 0, 0); \
+} while (0)
+
+#define TRACE_LEAVE(insn) do { \
+  EXEC_EVENT_HOOK(th, RUBY_EVENT_LEAVE, GET_SELF(), 0, 0); \
+} while (0)
+
+#define TRACE_YIELD(insn) do { \
+  EXEC_EVENT_HOOK(th, RUBY_EVENT_YIELD, GET_SELF(), 0, 0); \
+} while (0)
+
 #ifdef  COLLECT_USAGE_ANALYSIS
 #define USAGE_ANALYSIS_INSN(insn)           vm_analysis_insn(insn)
 #define USAGE_ANALYSIS_OPERAND(insn, n, op) vm_analysis_operand((insn), (n), (VALUE)(op))
