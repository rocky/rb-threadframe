Add RubyVM::OS_ARGV and RubyVM::OS_STARTUP_DIR to get the initial @ARGV
and current working directory 

Some programs like a debugger may want a way to reliably restart the program.
(Inside a Ruby program, one can change @ARGV and cwd)

diff --git a/include/ruby/ruby.h b/include/ruby/ruby.h
index 26e876e..5eca96f 100644
--- a/include/ruby/ruby.h
+++ b/include/ruby/ruby.h
@@ -1482,6 +1482,12 @@ int ruby_vsnprintf(char *str, size_t n, char const *fmt, va_list ap);
 #include "ruby/subst.h"
 #endif
 
+struct origarg {
+    int argc;
+    char **argv;
+    char *os_startup_dir;
+};
+
 #if defined(__cplusplus)
 #if 0
 { /* satisfy cc-mode */
diff --git a/ruby.c b/ruby.c
index ed39f44..57bda3b 100644
--- a/ruby.c
+++ b/ruby.c
@@ -116,10 +116,7 @@ static NODE *load_file(VALUE, const char *, int, struct cmdline_options *);
 static void forbid_setid(const char *, struct cmdline_options *);
 #define forbid_setid(s) forbid_setid((s), opt)
 
-static struct {
-    int argc;
-    char **argv;
-} origarg;
+struct origarg origarg;
 
 static void
 usage(const char *name)
@@ -1873,6 +1870,17 @@ ruby_sysinit(int *argc, char ***argv)
 #endif
     origarg.argc = *argc;
     origarg.argv = *argv;
+    origarg.os_startup_dir = malloc(MAXPATHLEN);
+#ifdef HAVE_GETCWD
+    if (!getcwd(origarg.os_startup_dir, MAXPATHLEN)) 
+        origarg.os_startup_dir[0] = '\0';
+#else
+    if (!getwd(origarg.os_startup_dir)) 
+        origarg.os_startup_dir[0] = '\0';
+#endif
+    origarg.os_startup_dir = realloc(origarg.os_startup_dir, 
+                                     strlen(origarg.os_startup_dir)+1);
+
 #if defined(USE_DLN_A_OUT)
     dln_argv0 = origarg.argv[0];
 #endif
diff --git a/test/debugger-ext/test_os_startup.rb b/test/debugger-ext/test_os_startup.rb
new file mode 100644
index 0000000..5851c9a
--- /dev/null
+++ b/test/debugger-ext/test_os_startup.rb
@@ -0,0 +1,11 @@
+require 'test/unit'
+
+class TestThread < Test::Unit::TestCase
+  def test_os_startup
+    assert_equal(true, RubyVM::OS_ARGV.any?{|arg| $0 == arg},
+                 "program name args should contain #{$0}")
+    assert_operator(2, :<=, RubyVM::OS_ARGV.size, 
+                    "RubyVM::OS_ARGV should contain at least the Ruby interpeter and the program name")
+    assert RubyVM::OS_STARTUP_DIR
+  end    
+end
diff --git a/vm.c b/vm.c
index c8e9569..463bc4a 100644
--- a/vm.c
+++ b/vm.c
@@ -2073,6 +2073,8 @@ nsdr(void)
     return ary;
 }
 
+extern struct origarg origarg;
+
 void
 Init_VM(void)
 {
@@ -2085,6 +2087,21 @@ Init_VM(void)
     rb_undef_alloc_func(rb_cRubyVM);
     rb_undef_method(CLASS_OF(rb_cRubyVM), "new");
 
+    /** set RubyVM::OS_ARGV and RubyVM::OS_STARTUP_DIR */
+    rb_define_const(rb_cRubyVM, "OS_STARTUP_DIR", 
+		    strlen(origarg.os_startup_dir) > 0 ? 
+		    rb_str_new2(origarg.os_startup_dir) : Qnil);
+    {
+	int argc;
+	char **argv;
+	VALUE ary = rb_ary_new();
+	rb_define_const(rb_cRubyVM, "OS_ARGV", ary);
+	for (argc = origarg.argc, argv = origarg.argv; 
+	     argc > 0; argc--, argv++) {
+	    rb_ary_push(ary, rb_str_new2(*argv));
+	}
+    }
+
     /* ::VM::FrozenCore */
     fcore = rb_class_new(rb_cBasicObject);
     RBASIC(fcore)->flags = T_ICLASS;
