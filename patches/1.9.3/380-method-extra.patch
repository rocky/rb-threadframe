Add methods alias_count, original_id, and type to Method and UnboundMethod

diff --git a/proc.c b/proc.c
index 92dddc0..eb6c731 100644
--- a/proc.c
+++ b/proc.c
@@ -2124,6 +2124,79 @@ rb_proc_iseq(VALUE self)
     return rb_iseq;
 }
 
+/* 
+ *  call-seq:
+ *  Method#alias_count -> Fixnum
+ *
+ *  number of aliases a method has
+ */
+VALUE
+rb_method_alias_count(VALUE self)
+{
+  struct METHOD *m1 = (struct METHOD *)DATA_PTR(self);
+  return INT2FIX(m1->me->def->alias_count);
+}
+
+/* 
+ *  call-seq:
+ *  Method#original_id - Original name of method
+ */
+VALUE
+rb_method_original_id(VALUE self)
+{
+  struct METHOD *m1 = (struct METHOD *)DATA_PTR(self);
+  return ID2SYM(m1->me->def->original_id);
+}
+
+/* 
+ *  call-seq:
+ *  Method#type -> String
+ * 
+ *  Returns the Method object.
+ */
+VALUE
+rb_method_type(VALUE self)
+{
+    rb_method_definition_t *def = method_get_def(self);
+    const char *type_str;
+    switch (def->type) {
+      case VM_METHOD_TYPE_ISEQ: 
+	type_str = "instruction sequence";
+	break;
+      case VM_METHOD_TYPE_CFUNC: 
+	type_str = "C function";
+	break;
+      case VM_METHOD_TYPE_ATTRSET:
+	type_str = "attrset";
+	break;
+      case VM_METHOD_TYPE_IVAR:
+	type_str = "ivar";
+	break;
+      case VM_METHOD_TYPE_BMETHOD:
+	type_str = "bmethod";
+	break;
+      case VM_METHOD_TYPE_ZSUPER:
+	type_str = "zsuper";
+	break;
+      case VM_METHOD_TYPE_UNDEF:
+	type_str = "undefined";
+	break;
+      case VM_METHOD_TYPE_NOTIMPLEMENTED:
+	type_str = "not implemented";
+	break;
+      case VM_METHOD_TYPE_OPTIMIZED: /* Kernel#send, Proc#call, etc */
+	type_str = "optimized";
+	break;
+      case VM_METHOD_TYPE_MISSING: /* wrapper for method_missing(id) */
+	type_str = "type missing";
+	break;
+      default:
+	type_str = "unknown";
+	break;
+    }
+    return rb_str_new2(type_str);
+}
+
 /*
  *  Document-class: LocalJumpError
  *
@@ -2261,6 +2334,10 @@ Init_Proc(void)
     rb_define_method(rb_mKernel, "method", rb_obj_method, 1);
     rb_define_method(rb_mKernel, "public_method", rb_obj_public_method, 1);
 
+    rb_define_method(rb_cMethod, "alias_count",  rb_method_alias_count, 0);
+    rb_define_method(rb_cMethod, "original_id",  rb_method_original_id, 0);
+    rb_define_method(rb_cMethod, "type",         rb_method_type, 0);
+
     /* UnboundMethod */
     rb_cUnboundMethod = rb_define_class("UnboundMethod", rb_cObject);
     rb_undef_alloc_func(rb_cUnboundMethod);
@@ -2278,6 +2355,10 @@ Init_Proc(void)
     rb_define_method(rb_cUnboundMethod, "source_location", rb_method_location, 0);
     rb_define_method(rb_cUnboundMethod, "parameters", rb_method_parameters, 0);
 
+    rb_define_method(rb_cUnboundMethod, "alias_count", rb_method_alias_count, 0);
+    rb_define_method(rb_cUnboundMethod, "original_id", rb_method_original_id, 0);
+    rb_define_method(rb_cUnboundMethod, "type",        rb_method_type, 0);
+
     /* Module#*_method */
     rb_define_method(rb_cModule, "instance_method", rb_mod_instance_method, 1);
     rb_define_method(rb_cModule, "public_instance_method", rb_mod_public_instance_method, 1);
diff --git a/test/debugger-ext/test_method.rb b/test/debugger-ext/test_method.rb
new file mode 100644
index 0000000..000ad2f
--- /dev/null
+++ b/test/debugger-ext/test_method.rb
@@ -0,0 +1,22 @@
+# Test of additional methods in Method
+require 'test/unit'
+
+class TestMethod < Test::Unit::TestCase
+  def test_method
+    m = self.method :test_method
+    assert_equal(1, m.alias_count)
+    assert_equal(:test_method, m.original_id)
+    self.instance_eval { assert_equal(1, m.alias_count) }
+    assert_equal(1, m.alias_count)
+    self.instance_eval { alias :two :test_method }
+    assert_equal(2, m.alias_count)
+    assert_equal(3, self.method(:test_method).alias_count)
+    assert_equal(3, m.alias_count)
+    assert_equal(4, self.method(:two).alias_count)
+    assert_equal(:test_method, self.method(:two).original_id)
+    assert_equal("instruction sequence", method(:test_method).type)
+    assert_equal("C function", File.method(:basename).type)
+    # Array.map is an unbound method
+    assert_equal("C function", Array.instance_method(:map).type)
+  end
+end
