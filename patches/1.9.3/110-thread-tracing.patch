Adds per-thread tracing by adding methods Thread#tracing? and Thread#tracing=

The basic mechanism of per-tracing thread was already inside. This
just exposes the ability the set or query thread tracing individually
by adding a couple of methods.

diff --git a/thread.c b/thread.c
index 2cf1064..69e6daa 100644
--- a/thread.c
+++ b/thread.c
@@ -4160,31 +4160,62 @@ thread_exec_event_hooks(VALUE args, int running)
     rb_thread_t *th = argp->th;
     rb_event_flag_t flag = argp->event;
     VALUE self = argp->self;
-    ID id = argp->id;
-    VALUE klass = argp->klass;
-    const rb_event_flag_t wait_event = th->event_flags;
-    int removed;
+    int do_tracing;
 
     if (self == rb_mRubyVMFrozenCore) return 0;
 
-    if ((wait_event & flag) && !(running & EVENT_RUNNING_THREAD)) {
-	th->tracing |= EVENT_RUNNING_THREAD;
-	removed = exec_event_hooks(th->event_hooks, flag, self, id, klass);
-	th->tracing &= ~EVENT_RUNNING_THREAD;
-	if (removed) {
-	    remove_defered_event_hook(&th->event_hooks);
-	}
-    }
-    if (wait_event & RUBY_EVENT_VM) {
-	if (th->vm->event_hooks == NULL) {
-	    th->event_flags &= (~RUBY_EVENT_VM);
-	}
-	else if (!(running & EVENT_RUNNING_VM)) {
-	    th->tracing |= EVENT_RUNNING_VM;
-	    removed = exec_event_hooks(th->vm->event_hooks, flag, self, id, klass);
-	    th->tracing &= ~EVENT_RUNNING_VM;
+    /* Either we haven't turned off tracing via the thread mechanism
+       or we set a return trace and the event is a some kind of return. */
+    do_tracing = UNLIKELY( !(th->cfp->tracing & VM_FRAME_TRACE_OFF) ||
+			   ((flag & (RUBY_EVENT_C_RETURN | RUBY_EVENT_RETURN))
+			    && th->cfp->tracing & VM_FRAME_TRACE_RETURN) );
+
+    if (do_tracing) {
+	const rb_event_flag_t wait_event = th->event_flags;
+	ID id = argp->id;
+	int removed;
+	VALUE klass = argp->klass;
+	if ((wait_event & flag) && !(running & EVENT_RUNNING_THREAD)) {
+	    th->tracing |= EVENT_RUNNING_THREAD;
+	    removed = exec_event_hooks(th->event_hooks, flag, self, id, klass);
+	    th->tracing &= ~EVENT_RUNNING_THREAD;
 	    if (removed) {
-		remove_defered_event_hook(&th->vm->event_hooks);
+		remove_defered_event_hook(&th->event_hooks);
+	    }
+	}
+	if (wait_event & RUBY_EVENT_VM) {
+	    if (th->vm->event_hooks == NULL) {
+		th->event_flags &= (~RUBY_EVENT_VM);
+	    }
+	    else if (!(running & EVENT_RUNNING_VM)) {
+		if (0 == th->exec_event_tracing) {
+		    /* Modified from ruby_suppress_tracing */
+		    int state;
+		    volatile int raised = rb_threadptr_reset_raised(th);
+		    rb_block_t * base_block_save = th->base_block;
+		    th->exec_event_tracing = 1;
+		    
+		    PUSH_TAG();
+		    if ((state = EXEC_TAG()) == 0) {
+			th->tracing |= EVENT_RUNNING_VM;
+			removed = exec_event_hooks(th->vm->event_hooks, flag, self, id, klass);
+			th->tracing &= ~EVENT_RUNNING_VM;
+			if (removed) {
+			    remove_defered_event_hook(&th->vm->event_hooks);
+			}
+		    }
+		    
+		    th->base_block = base_block_save;
+		    if (raised) {
+			rb_threadptr_set_raised(th);
+		    }
+		    POP_TAG();
+			
+		    th->exec_event_tracing = 0;
+		    if (state) {
+			JUMP_TAG(state);
+		    }
+		}
 	    }
 	}
     }
@@ -4404,6 +4435,7 @@ set_trace_func(int argc, VALUE *argv)
     }
 
     if (NIL_P(trace)) {
+	GET_THREAD()->exec_event_tracing = 0;
 	GET_THREAD()->tracing = EVENT_RUNNING_NOTHING;
 	return Qnil;
     }
@@ -4592,6 +4592,67 @@ thread_suppress_tracing(rb_thread_t *th, int ev, VALUE (*func)(VALUE, int), VALU
     return result;
 }
 
+
+/* 
+ *  call-seq:
+ *  Thread#tracing? -> bool
+ * 
+ *  Returns the value of the thread event-hook tracing.
+ */
+VALUE
+rb_thread_tracing(VALUE self)
+{
+    rb_thread_t *th;
+    GetThreadPtr(self, th);
+    return th->tracing ? Qtrue : Qfalse;
+}
+
+/* 
+ *  call-seq:
+ *  Thread#tracing= bool
+ * 
+ *  Sets the value of thread event-hook tracing.
+ */
+VALUE
+rb_thread_tracing_set(VALUE self, VALUE new_value)
+{
+    rb_thread_t *th;
+    GetThreadPtr(self, th);
+
+    th->tracing = RTEST(new_value) ? Qtrue : Qfalse;
+    return th->tracing;
+}
+
+/* 
+ *  call-seq:
+ *  Thread#exec_event_tracing -> bool
+ *
+ *  Returns the value of the thread event-hook tracing.
+ */
+VALUE
+rb_thread_exec_event_tracing(VALUE self)
+{
+    rb_thread_t *th;
+    GetThreadPtr(self, th);
+    return th->exec_event_tracing ? Qtrue : Qfalse;
+}
+
+/* 
+ *  call-seq:
+ *  Thread#exec_event_tracing=(new_value)
+ * 
+ *  Sets the value of thread event-hook tracing.
+ */
+VALUE
+rb_thread_exec_event_tracing_set(VALUE self, VALUE new_value)
+{
+    rb_thread_t *th;
+    GetThreadPtr(self, th);
+
+    th->exec_event_tracing = RTEST(new_value) ? Qtrue : Qfalse;
+    return th->exec_event_tracing;
+}
+
 /*
  *  call-seq:
  *     thr.backtrace    -> array
@@ -4713,6 +4744,14 @@ Init_Thread(void)
     rb_define_method(rb_cThread, "set_trace_func", thread_set_trace_func_m, 1);
     rb_define_method(rb_cThread, "add_trace_func", thread_add_trace_func_m, 1);
 
+    rb_define_method(rb_cThread, "tracing=",  rb_thread_tracing_set, 1);
+    rb_define_method(rb_cThread, "tracing?",  rb_thread_tracing, 0);
+
+    rb_define_method(rb_cThread, "exec_event_tracing=",  
+		     rb_thread_exec_event_tracing_set, 1);
+    rb_define_method(rb_cThread, "exec_event_tracing?",
+		     rb_thread_exec_event_tracing, 0);
+
     /* init thread core */
     {
 	/* main thread setting */
@@ -4846,4 +4881,3 @@ rb_reset_coverages(void)
     GET_VM()->coverages = Qfalse;
     rb_remove_event_hook(update_coverage);
 }
-
diff --git a/test/debugger-ext/test_thread.rb b/test/debugger-ext/test_thread.rb
new file mode 100644
index 0000000..89afb5e
--- /dev/null
+++ b/test/debugger-ext/test_thread.rb
@@ -0,0 +1,15 @@
+require 'test/unit'
+
+class TestThread < Test::Unit::TestCase
+  def test_thread_tracing
+    assert_equal(false, Thread.current.tracing?)
+    Thread.current.tracing = true
+    assert_equal(true, Thread.current.tracing?)
+    Thread.current.tracing = false
+    assert_equal(false, Thread.current.tracing?)
+  end    
+end
+
+# We want to double-check we didn't mess up any pointers somewhere along
+# the line.
+at_exit { GC.start  }
