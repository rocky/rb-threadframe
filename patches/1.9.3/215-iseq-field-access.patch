More InstructionSequence methods: compile_options, encoded, equal? line_range, local_iseq, local_name, parent

diff --git a/iseq.c b/iseq.c
index b096d05..ec66a69 100644
--- a/iseq.c
+++ b/iseq.c
@@ -122,6 +122,23 @@ iseq_mark(void *ptr)
     RUBY_MARK_LEAVE("iseq");
 }
 
+/* 
+ * This routine is here to allow an external C extension to create a
+ * RubyVM::InstructionSequence object sequence from its own C pointer
+ * of type rb_iseq_t *. For example, the rb-threadframe uses this
+ * routine to implement Method#iseq and Proc#iseq.
+ */
+VALUE
+iseq_alloc_shared(VALUE klass)
+{
+    VALUE volatile obj;
+    rb_iseq_t *iseq;
+
+    obj = Data_Make_Struct(klass, rb_iseq_t, iseq_mark, NULL, iseq);
+    MEMZERO(iseq, rb_iseq_t, 1);
+    return obj;
+}
+
 static size_t
 iseq_memsize(const void *ptr)
 {
@@ -1514,6 +1531,105 @@ iseq_name(VALUE iseqval)
 }
 
 /* 
+ *  Document-method: RubyVM::InstructionSequence::equal?
+ * 
+ *  call-seq:
+ *     RubyVM::InstructionSequence#equal?(iseq2) -> bool
+ *
+ *  Returns true if the instruction sequences are equal.
+ */
+VALUE 
+rb_iseq_equal(VALUE iseqval1, VALUE iseqval2)
+{
+    rb_iseq_t *iseq1, *iseq2;
+
+    if (Qnil == iseqval2) return Qfalse;
+    if (!rb_obj_is_kind_of(iseqval2, rb_cISeq)) {
+	rb_raise(rb_eTypeError, 
+		 "comparison argument must be an instance of %s or nil (is %s)",
+		 rb_obj_classname(iseqval1), rb_obj_classname(iseqval2));
+    }
+    
+    if (iseqval1 == iseqval2) return Qtrue;
+    GetISeqPtr(iseqval1, iseq1);
+    GetISeqPtr(iseqval2, iseq2);
+
+    /* FIXME: the count 28 below  is bogus. I think this should be the fields
+       from "type" to  "mark_ary". Should also include iseq->encoded.
+     */
+    if (0 == memcmp(iseq1, iseq2, 28))
+	return Qtrue;
+    else
+	return Qfalse;
+}
+
+VALUE 
+rb_iseq_parent(VALUE self)
+{
+    rb_iseq_t *piseq;
+    rb_iseq_t *parent_iseq;
+    VALUE parent_iseqval;
+    GetISeqPtr(self, piseq);
+
+    if (!RTEST(piseq->parent_iseq)) return Qnil;
+    parent_iseqval = iseq_alloc_shared(rb_cISeq);
+    GetISeqPtr(parent_iseqval, parent_iseq);
+    memcpy(parent_iseq, piseq->parent_iseq, sizeof(struct rb_iseq_struct));
+    return parent_iseqval;
+}
+
+VALUE 
+rb_iseq_local_iseq(VALUE self)
+{
+    rb_iseq_t *piseq;
+    rb_iseq_t *local_iseq;
+    VALUE local_iseqval;
+    GetISeqPtr(self, piseq);
+
+    if (!RTEST(piseq->local_iseq)) return Qnil;
+    local_iseqval = iseq_alloc_shared(rb_cISeq);
+    GetISeqPtr(local_iseqval, local_iseq);
+    memcpy(local_iseq, piseq->local_iseq, sizeof(struct rb_iseq_struct));
+    return local_iseqval;
+}
+
+/* 
+ * call-seq:
+ *     RubyVM::InstructionSequence#local_name(i) - String
+ * 
+ *  Returns the string name of local variable in i'th position
+ *  of the instruction sequence local table, or nil if i is
+ * out of range.
+ */
+VALUE
+rb_iseq_local_name(VALUE iseqval, VALUE val)
+{
+    rb_iseq_t *iseq;
+    if (FIXNUM_P(val)) {
+      long int i = FIX2INT(val);
+      long int size;
+      
+      GetISeqPtr(iseqval, iseq);
+      
+      size = iseq->local_table_size;
+      
+      if (i < 0) i = size + i;
+      
+      if (i >= size)
+	rb_raise(rb_eIndexError, 
+		 "local table index %ld should be in the range -%ld .. %ld",
+		 i, size, size-1);
+      
+      return rb_str_new2(rb_id2name(iseq->local_table[i]));
+    } else {
+      rb_raise(rb_eTypeError, "type mismatch: %s given, Fixnum expected", 
+	       rb_class2name(CLASS_OF(val)));
+    }
+    /* not reached. */
+    return Qnil;
+}
+
+/* 
  * call-seq:
  *     RubyVM::InstructionSequence#offsetlines -> Hash[Fixnum] -> [Fixnum]
  * 
@@ -1608,6 +1724,95 @@ ISEQ_INT_FIELD_METHOD(line_no) ;
 ISEQ_INT_FIELD_METHOD(local_size) ;
 ISEQ_INT_FIELD_METHOD(local_table_size) ;
 
+/*
+ * call-seq:
+ *    RubyVM::InstructionSequence#line_range() -> Range
+ *
+ * Returns a range containing the starting line number and the
+ * ending line of the source code for the instruction-sequence.
+ */
+VALUE
+rb_iseq_line_range(VALUE iseqval) 
+{
+    rb_iseq_t *iseq;
+
+    GetISeqPtr(iseqval, iseq);
+    if (Qnil == iseqval) return Qnil;
+    else {
+	unsigned long i, size = iseq->insn_info_size;
+	struct iseq_insn_info_entry *table = iseq->insn_info_table;
+	unsigned short min_line = table[0].line_no;
+	unsigned short max_line = table[0].line_no;
+	
+	for (i = 0; i < size; i++) {
+	    if (table[i].line_no < min_line) 
+		min_line = table[i].line_no;
+	    else if (table[i].line_no > max_line)
+		max_line = table[i].line_no;
+	}
+	return rb_range_new(INT2FIX(min_line), INT2FIX(max_line), 0);
+    }
+}
+
+#define COMPILE_OPTS_BOOL_SET_HASH(FIELD) \
+    rb_hash_aset(hash_opts, rb_str_new2(#FIELD), \
+		 (compile_opts->FIELD) ? Qtrue : Qfalse)
+    
+/* 
+ *  Document-method: RubyVM::InstructionSequence::compile_options
+ *
+ *  call-seq:
+ *     RubyVM::InstructionSequence#compile_options -> Hash
+ *
+ *  Returns a hash of the compiler options used to create the 
+ *  instruction sequence.
+ */
+VALUE
+rb_iseq_compile_options(VALUE iseqval)
+{
+    rb_iseq_t *iseq;
+    if (Qnil == iseqval) return Qnil;
+    else {
+	VALUE hash_opts = rb_hash_new();
+	const rb_compile_option_t *compile_opts;
+	GetISeqPtr(iseqval, iseq);
+	if (!iseq->compile_data) return Qnil;
+	compile_opts = iseq->compile_data->option;
+	COMPILE_OPTS_BOOL_SET_HASH(inline_const_cache);
+	COMPILE_OPTS_BOOL_SET_HASH(peephole_optimization);
+	COMPILE_OPTS_BOOL_SET_HASH(tailcall_optimization);
+	COMPILE_OPTS_BOOL_SET_HASH(specialized_instruction);
+	COMPILE_OPTS_BOOL_SET_HASH(operands_unification);
+	COMPILE_OPTS_BOOL_SET_HASH(stack_caching);
+	COMPILE_OPTS_BOOL_SET_HASH(trace_instruction);
+	COMPILE_OPTS_BOOL_SET_HASH(debug_level);
+#ifdef FINISHED
+	COMPILE_OPTS_BOOL_SET_HASH(save_tree_node);
+	COMPILE_OPTS_BOOL_SET_HASH(save_compile_opts);
+#endif
+	return hash_opts;
+    }
+}
+
+/* 
+ *  Document-method: RubyVM::InstructionSequence::encoded
+ * 
+ *  call-seq:
+ *     RubyVM::InstructionSequence#iseq_encoded -> String
+ *
+ *  Returns a string of the encoded bytes of the instruction
+ *  sequence. Note that this is probably not usable as is, may be useful in
+ *  decoding instructions (using other info) or for getting a sha1
+ *  checksum.
+ */
+VALUE 
+rb_iseq_iseq_encoded(VALUE iseqval)
+{
+    rb_iseq_t *iseq;
+    GetISeqPtr(iseqval, iseq);
+    return rb_str_new((char *) iseq->iseq_encoded, iseq->iseq_size);
+}
+
 void
 Init_ISeq(void)
 {
@@ -1619,14 +1824,16 @@ Init_ISeq(void)
     rb_define_method(rb_cISeq, "arg_post_len",     rb_iseq_arg_post_len, 0) ;
     rb_define_method(rb_cISeq, "arg_rest",         rb_iseq_arg_rest, 0) ;
     rb_define_method(rb_cISeq, "arg_simple",       rb_iseq_arg_simple, 0) ;
-#ifdef FINISHED
-    rb_define_method(rb_cISeq, "compile_options",  iseq_compile_options, 0) ;
-    rb_define_method(rb_cISeq, "equal?",           iseq_equal, 1) ;
-    rb_define_method(rb_cISeq, "line_range",       iseq_line_range, 0) ;
-    rb_define_method(rb_cISeq, "local_iseq",       iseq_local_iseq, 0) ;
-    rb_define_method(rb_cISeq, "local_name",       iseq_local_name, 1) ;
-    rb_define_method(rb_cISeq, "parent",           iseq_parent, 0) ;
-#endif
+    rb_define_method(rb_cISeq, "argc",             rb_iseq_argc, 0) ;
+
+    rb_define_method(rb_cISeq, "compile_options",  rb_iseq_compile_options, 0) ;
+    rb_define_method(rb_cISeq, "encoded",          rb_iseq_iseq_encoded, 0) ;
+    rb_define_method(rb_cISeq, "equal?",           rb_iseq_equal, 1) ;
+    rb_define_method(rb_cISeq, "line_range",       rb_iseq_line_range, 0) ;
+    rb_define_method(rb_cISeq, "local_iseq",       rb_iseq_local_iseq, 0) ;
+    rb_define_method(rb_cISeq, "local_name",       rb_iseq_local_name, 1) ;
+    rb_define_method(rb_cISeq, "parent",           rb_iseq_parent, 0) ;
+
     rb_define_method(rb_cISeq, "iseq_size",        rb_iseq_iseq_size, 0) ;
     rb_define_method(rb_cISeq, "klass",            rb_iseq_klass, 0) ;
     rb_define_method(rb_cISeq, "lineno",           rb_iseq_line_no, 0) ;
diff --git a/test/debugger-ext/test_iseq.rb b/test/debugger-ext/test_iseq.rb
new file mode 100644
index 0000000..7c961c0
--- /dev/null
+++ b/test/debugger-ext/test_iseq.rb
@@ -0,0 +1,126 @@
+require 'test/unit'
+
+class TestISeq < Test::Unit::TestCase
+
+  class C
+    def initialize(test_obj, optional=true)
+      iseq = RubyVM::Frame::current.iseq
+      test_obj.assert_equal('test_obj', iseq.local_name(0))
+      test_obj.assert_equal(1, iseq.arity)
+      test_obj.assert_equal(-1, iseq.arg_block)
+      test_obj.assert_equal(1, iseq.argc)
+    end
+  end
+  
+  def test_fields
+    skip "RubyVM::Frame patch needs to be done for this to work" unless
+      defined?(RubyVM::Frame)
+    start_lineno = __LINE__ - 3
+    iseq = RubyVM::Frame::current.iseq
+    assert iseq
+    assert_equal('test_fields', iseq.name)
+    ## FIXME: Why does this fail? 
+    ## assert_equal(start_lineno, iseq.lineno, 'iseq.lineno')
+    assert_equal(0, iseq.arity)
+    assert_equal(-1, iseq.arg_block)
+    assert_equal(0, iseq.argc)
+    assert_equal(0, iseq.arg_opts)
+    assert_equal(4, iseq.local_table_size)
+    x  = lambda do |x,y| 
+      iseq = RubyVM::Frame::current.iseq
+      assert iseq
+      assert_equal(2, iseq.arity)
+      assert_equal(-1, iseq.arg_block)
+      assert_equal(2, iseq.argc)
+      assert_equal(0, iseq.arg_opts)
+      assert_equal(3, iseq.local_table_size)
+      ['x', 'y'].each_with_index do |expect, i|
+        assert_equal(expect, iseq.local_name(i))
+      end
+      
+      assert_equal('x', iseq.local_name(-1))
+      assert_raise IndexError do
+        x = iseq.local_name(10)
+      end
+    end
+    x.call(1,2)
+
+    x  = Proc.new do |a|
+      iseq = RubyVM::Frame::current.iseq
+      assert iseq
+      assert_equal(1, iseq.arity)
+      assert_equal(-1, iseq.arg_block)
+      assert_equal(1, iseq.argc)
+      assert_equal(0, iseq.arg_opts)
+      assert_equal(1, iseq.local_table_size)
+      ['a'].each_with_index do |expect, i|
+        assert_equal(expect, iseq.local_name(i))
+      end
+      assert_raises IndexError do
+        x = iseq.local_name(100)
+      end
+      assert_raises TypeError do 
+        p iseq.local_name('a')
+      end
+    end
+    x.call(1,2)
+    C.new(self, 5)
+    end_lineno = __LINE__ + 3
+    assert_equal((start_lineno..end_lineno), 
+                 method(:test_fields).iseq.line_range, 'line range')
+  end
+
+  def test_iseq_equal
+    skip "RubyVM::Frame patch needs to be done for this to work" unless
+      defined?(RubyVM::Frame)
+    tf = RubyVM::Frame.current
+    tf2 = RubyVM::Frame.current
+    while !tf.iseq do
+      tf = tf.prev
+      tf2 = tf2.prev
+    end
+    assert_equal(false, tf.iseq.equal?(nil))
+    assert_equal(true,  tf.iseq.equal?(tf.iseq))
+    assert_equal(true,  tf.iseq.equal?(tf2.iseq))
+    tf2 = tf2.prev 
+    while !tf2.iseq do tf2 = tf2.prev end
+    assert_equal(false, tf.iseq.equal?(tf2.iseq))
+    assert_raises TypeError do
+      tf.iseq.equal?(tf)
+    end
+  end
+
+  # # FIXME: killcache interface will probably change. Try make less sensitive
+  # # to compile sequence
+  # def test_iseq_killcache
+  #   iseq = RubyVM::Frame.current.iseq
+  #   count = iseq.killcache
+  #   if 0 != count
+  #     assert_equal(0, iseq.killcache, 
+  #                'Doing killcache a second time should do nothing')
+  #   end
+  # end
+
+  def test_offsetlines
+    skip "RubyVM::Frame patch needs to be done for this to work" unless
+      defined?(RubyVM::Frame)
+    start     = __LINE__ - 3
+    tf        = RubyVM::Frame::current
+    iseq      = tf.iseq
+    offlines  = iseq.offsetlines
+    pc        = tf.pc_offset
+    assert_equal(__LINE__, offlines[pc][0]+1)
+    offlines.values.each do |value|
+      assert(value[0] >= start, "#{value[0]} should be not less than starting line #{start}")
+      # Rough count of # of lines is less than 20
+      assert(value[0] < start + 20, "#{value[0]} should be less than starting line #{start}")
+    end
+    offlines.keys.each do |offset|
+      assert_equal offlines[offset][0], iseq.offset2lines(offset)[0]
+    end
+  end
+
+end
+
+# We want to double-check we didn't mess up any pointers somewhere.
+at_exit { GC.start  }
diff --git a/test/debugger-ext/test_iseq_source.rb b/test/debugger-ext/test_iseq_source.rb
new file mode 100644
index 0000000..07a7e1f
--- /dev/null
+++ b/test/debugger-ext/test_iseq_source.rb
@@ -0,0 +1,26 @@
+require 'test/unit'
+class TestISeqSource < Test::Unit::TestCase
+  def test_source
+    iseq = RubyVM::InstructionSequence.new("x=1")
+    assert_equal  2, iseq.local_size
+    assert_equal  0, iseq.argc
+    assert_equal -1, iseq.arg_rest
+    assert_equal  0, iseq.arg_post_len
+    assert_equal -1, iseq.arg_block
+    assert_equal  1, iseq.arg_simple
+    assert_equal  1, iseq.local_table_size
+    assert_operator 0, :<=, iseq.iseq_size
+    assert_equal [1], iseq.offset2lines(0)
+    assert iseq.offsetlines.is_a?(Hash)
+    assert iseq.offsetlines.values.all?{|x| x == [1]}
+    assert iseq.disasm.is_a?(String)
+    assert_equal 1, iseq.eval
+    assert iseq.self.kind_of?(RubyVM::InstructionSequence)
+    # puts iseq.disasm
+    # puts iseq.name
+    # puts iseq.type
+    # puts iseq.klass
+    # puts iseq.lineno
+  end
+
+end
