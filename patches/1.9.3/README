Below is a description of the patches.

About the numbering used below. Numbers at a given power of ten are
supposed to be somewhat independent. (See below for what "somewhat
independent" means.

"Somewhat" indpendent patch can be applied independent of the other
patches at that level. So 000 and 100 and 1xx and and 2xx are somewhat
independent.  Likewise for 210, 220, 230 or 210, 211, 212. But 225 is
thought to be dependent on 220. Of course, if patches are skipped
applying higher number patches may give messages about "fuzz" being
applied to line numbers and file offsets.

More on "somewhat" independent. There are two kinds of
dependencies. Those where one feature depends on another
feature. These should be captured by the sub-numbering scheme
above. But there is another kind of dependence due to the patch
mechanism which needs context and line numbers to find a patch. Here
it may be the case that two patches are logically independent but one
patch changes some context lines that another patch will use. This is
captured only by the total ordering of the patch numbers. If some
patches are skipped it is possible the patch mechanism will be able to
handle this giving "fuzz" and "offset line" messages. Alas, more
likely though some hunks of the patch may be rejected.

I have not put a lot of effort into ensuring arbitrary intermediate
patches can be skipped. 


-------------------
000-testit.patch:

Adds a script that helps me run the debugger-extension unit tests
easier. Probably not needed if I understood the Ruby testing system
better.
-------------------
110-thread-tracing.patch

Adds per-thread tracing by adding methods Thread#tracing? and Thread#tracing=

The basic mechanism of per-tracing thread was already inside. This
just exposes the ability the set or query thread tracing individually
by adding a couple of methods.

-------------------
120-frame-tracing.patch

This patch adds adds the ability to set tracing on or off per frame.
Subsequent frames created which are called a frame with tracing set
off keeps tracing off by default.  (Infrequently one may want to
override this default behavior such as when wants to debug a
debugger.)  When frame returns, the trace bit is taken from the value
set from the previous frame's trace bit.

There is already a such a tracing bit that is similar which is set per
thread, but I don't think this is as useful.  When a trace hook is
called, if the hook yields to the debugged program (in the same
thread), I think the desired intent would be that tracing to turn
tracing back on if that is what it was before entering the hook.

This patch is helps make a debugger "step out" (or in gdb "finish"
command) fast.

Finally, sometimes one wants to do some setup before running a trace
hook, or write some code which simulates calling the hook as though it
were triggered by the runtime, even though it isn't. An example of
this is an immediate call to a debugger from the source code to be
debugged. This is in contrast to waiting for the next event to trigger
a call to a debugger. 

In ruby-debug situation one writes "debugger(:immediate => true)" and
this is used as a workaround for getting into the debugger in a method
at a point when there are no subsequent "line" events in that
method. Although in the next debugger this won't be needed, it still
is a nice thing to have. From the programmer's standpoint such an
immediate stop mechanism more straightforward and predictable.

In such a situation, the setup code ("debugger" above) may also call
other methods before entering the hook and so we want an easy way to
make sure those routines don't get traced just as the setup routine
isn't traced.

One might make a case for removing the trace bit in the thread
structure and having the frame bit subsume that. To be conservative
and compatible, I haven't done that.

-------------------
130-brkpt.patch

Add support for breakpoints in the VM. This allows debuggers to run at full
speed.  

External routines added to RubyVM::InstructionSequence (in brkpt.c): 
  brkpt_alloc - allocate breakpoint vector
  brkpt_set   - set a breakpoint at a given VM offset
  brkpt_unset - unset a breakpoint
  brkpt_get   - see if a breakpoint is set a a particlar VM offset
  brkpt_get   - get list of breakpoints set in this instruction sequence
  
Initial timing evidence by Mark Moseley suggests that the
overhead is negligible.

Previous RubyVM::InstructionSequence patches facilitate getting access
to instruction sequences

Depends on frame-tracing.patch only because of proximity to changes
(i.e. patch context) in in vm_insnhelper.c. Could be reworked to not
need that patch.

-------------------
210-iseq-field-access.patch

Access to more of the iseq fields: argc, arg_rest, arg_block,
offsetlines, offset2line, local_size, local_table_size, iseq_size,
arg_simple

-------------------
215-iseq-field-access.patch

More InstructionSequence methods: 
   compile_options, equal? line_range, local_iseq, local_name, parent

Depends on 210. The two could be combined. Testing depends on
RubyVM::Frame in frame.patch

-------------------
220-iseq-eval-source-save.patch:

Give name for top instruction sequences (those that don't have a
parent) a more uniqe and descriptive name. In a debugger we show and
make use of these names in specifying locations.

-------------------
230-top-name.patch:

Adds Instruction#source method. If this instruction sequence came from
eval(), the string of the source is returned from this method.

TODO: figure out how to have this "source" field filled out more
often.

------------------- 240-iseq-SCRIPT_ISEQS__.patch

A debugger or similar introspection tool needs to be able to find all
instruction sequences and access them. This patch facilitates this by
adding the following behavior, analogous to SCRIPT_LINES__ for
capturing source-code lines.

If SCRIPT_ISEQS__ is defined and is a hash, then every time a new
instruction sequence is added, it is accessible from SCRIPT_ISEQS__
using the "filename" as a key.

Similarly, if ISEQS__ is defined and is a hash, then every time a new
instruction sequence is added, it is accessible from ISEQS__ using its
iseq_name as a key.

If ISEQS__ is set, we don't discard the compile options.
Some programs like a debugger may want a way to reliably restart the program.
-------------------
245-method-arity.patch

Adds Method#arity. 

The unit test added here uses ISEQS__ from
240-iseq-SCRIPT_ISEQS__.patch and adds code to that the unit
test. Probably the unit test here could be rewritten to avoid this.

-------------------
246-os-startup.patch

Add RubyVM::Frame - a class for a run-time call frame object. It from this we
can get a binding, and instruction sequence. 

Some care is take to ensure that the frame is still active using a
"signature" and other checks. 

This patch depends on lots of a number of prior patches.

-------------------
310-os-startup.patch

RubyVM::OS_ARGV and RubyVM::OS_STARTUP_DIR captures the initial @ARGV
and current working directory to make this happen. (Inside a Ruby
program, one can change @ARGV and cwd)

-------------------
320-disasm-insns.patch

Add more access to VM opcodes and finer control of disassembly.

rb_iseq_disasm_nochildren() disassembles just the given instruction sequence, not any child instruction sequences (such as those of nested procedures).
rb_child_iseqs (Ruby iseq#child_iseqs) returns and array of child instruction sequences of "iseq".

Also adds access to an instruction's length, name, operand types. 

-------------------
340-trace-func-mask.patch

1. adds the ability to set filter trace events inside Ruby using an
optional FIXNUM bitmask of event bits.

2. allows thread trace hooks to be chained. (NOT WORKING YET, 
PROBABLY REQUIRES per-frame tracing)

The underlying mechanism for filtering by an event mask was already in
the code base, just not previously user-accessible. It had been used
internally to separate "profiling" hooks versus "debugging" hooks. I'm
not sure why there needs to be a distinction.

Allowing user-control over the mask allows debuggers to run faster --
filtering inside Ruby is faster than doing it in a trace hook. It
also allows for more flexibility in custom trace hooks.

Since using a FIXNUM bitmask is a little low-level, it is anticipated
that this is addressed by a Ruby module. For example see rb-trace
which defines constants for the bits in the bit masks and allows one
to give a Ruby set of event strings/symbols rather than a bitmask.

More detail regarding the Ruby routines changed/added:

  clear_trace_func() - removes all trace hooks for a thread. This was
                       available, but not callable from Ruby.
  add_trace_func() - adds a trace hook without destroying previous hooks
  set_trace_func() - changed to allow for an option trace-event bitmask

NOTE: Possibly a way is needed to remove a specific hook. Right now I
have been using rb-trace to manage lists of trace hooks.

Ideally I would have split out into different patches 1) and 2) from
3) and 4) above.  But because both occur in close proximity in the
source code, it was much easier to do the patching with them combined.

-------------------
345-raise-msg.patch:

This patch provides a way to get the exception object on a "raise"
event in a trace hook. The exeception object passed as the "klass"
parameter in the hook callback.

Note that in a hook one can get the class via a binding from the frame
using eval('self.class', binding)

Another small but unrelated change here is to fill in some of the
missing event names in the case statement of routine get_event_name().

The test in this patch depends on trace-func-mask.patch as it uses
clear_trace_func and set_trace_func with an event mask. The patch
could probably be rewritten so it doesn't need this dependency.

-------------------
410-c-hook.patch

Adjusts the location of trace hook events for C calls and C returns
so that the hook has access to the call stack. The stack contains the
parameters and return value. Note that this also has a good effect in my
opinion of not running the hook for the c-return of the set_trace_func
call.  

Also, the patch allows the trace hook change the return value of in a
C return.

