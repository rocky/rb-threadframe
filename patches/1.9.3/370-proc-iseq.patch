Adds Proc#iseq

diff --git a/proc.c b/proc.c
index 8963247..92dddc0 100644
--- a/proc.c
+++ b/proc.c
@@ -2102,6 +2102,27 @@ proc_curry(int argc, VALUE *argv, VALUE self)
     return make_curry_proc(self, rb_ary_new(), arity);
 }
 
+/* 
+ *  call-seq:
+ *  Proc#iseq -> RubyVM::InstructionSequence
+ *
+ *  Returns the instruction sequence for a Proc object.
+ */
+VALUE
+rb_proc_iseq(VALUE self)
+{
+    rb_proc_t *proc;
+    rb_iseq_t *iseq;
+    VALUE rb_iseq;
+    GetProcPtr(self, proc);
+    iseq = proc->block.iseq;
+    if (!iseq || !RUBY_VM_NORMAL_ISEQ_P(iseq->self))
+	return Qnil;
+    rb_iseq = iseq_alloc_shared(rb_cISeq);
+    RDATA(rb_iseq)->data = iseq;
+    return rb_iseq;
+}
+
 /*
  *  Document-class: LocalJumpError
  *
@@ -2193,6 +2214,7 @@ Init_Proc(void)
     rb_define_method(rb_cProc, "==", proc_eq, 1);
     rb_define_method(rb_cProc, "eql?", proc_eq, 1);
     rb_define_method(rb_cProc, "hash", proc_hash, 0);
+    rb_define_method(rb_cProc, "iseq", rb_proc_iseq, 0);
     rb_define_method(rb_cProc, "to_s", proc_to_s, 0);
     rb_define_method(rb_cProc, "lambda?", rb_proc_lambda_p, 0);
     rb_define_method(rb_cProc, "binding", proc_binding, 0);
diff --git a/test/debugger-ext/test_proc.rb b/test/debugger-ext/test_proc.rb
new file mode 100644
index 0000000..7737aef
--- /dev/null
+++ b/test/debugger-ext/test_proc.rb
@@ -0,0 +1,7 @@
+require 'test/unit'
+
+class TestProc < Test::Unit::TestCase
+  def test_sha1
+    assert proc{ 5}.iseq.kind_of?(RubyVM::InstructionSequence)
+  end
+end
