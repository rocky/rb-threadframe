Change "file" name in eval string to be more descriptive by including
part of the eval string. That is "(eval): ..." becomes "(eval: x=1\n"...):

Index: vm_eval.c
===================================================================
--- vm_eval.c	(revision 28647)
+++ vm_eval.c	(working copy)
@@ -31,6 +31,33 @@
 
 static VALUE send_internal(int argc, const VALUE *argv, VALUE recv, call_type scope);
 
+/* Return "true" (nonzero) if file is from an eval. 
+   The eval "filename" had been "(eval)" and we want to start moving
+   towards a name "(eval: *leading-part-of-eval-string*)". 
+
+   Also we want to start thinking in terms of "containers" rather 
+   than "files".
+*/
+static inline int
+container_is_eval(const char *volatile file)
+{
+  return (strncmp(file, "(eval", sizeof("(eval")-1) == 0);
+}
+
+#define EVAL_LEADING_CONTEXT 15
+static inline const char *
+create_eval_container_name(VALUE str)
+{
+    VALUE leading_context = rb_str_inspect(str);
+    long len = NUM2LONG(rb_str_length(leading_context));
+    if (len > EVAL_LEADING_CONTEXT)
+	return RSTRING_PTR(rb_sprintf("(eval: %.15s\"...)", 
+				      RSTRING_PTR(leading_context)));
+    else
+	return RSTRING_PTR(rb_sprintf("(eval: %s)", 
+				      RSTRING_PTR(leading_context)));
+}
+
 static inline VALUE
 vm_call0(rb_thread_t* th, VALUE recv, VALUE id, int argc, const VALUE *argv,
 	 const rb_method_entry_t *me)
@@ -971,7 +1004,7 @@
 	    if (rb_obj_is_kind_of(scope, rb_cBinding)) {
 		GetBindingPtr(scope, bind);
 		envval = bind->env;
-		if (strcmp(file, "(eval)") == 0 && bind->filename != Qnil) {
+		if (container_is_eval(file) && bind->filename != Qnil) {
 		    file = RSTRING_PTR(bind->filename);
 		    line = bind->line_no;
 		}
@@ -1029,7 +1062,7 @@
     if (state) {
 	if (state == TAG_RAISE) {
 	    VALUE errinfo = th->errinfo;
-	    if (strcmp(file, "(eval)") == 0) {
+	    if (container_is_eval(file)) {
 		VALUE mesg, errat, bt2;
 		extern VALUE rb_get_backtrace(VALUE info);
 		ID id_mesg;
@@ -1110,13 +1143,22 @@
 
     if (!NIL_P(vfile))
 	file = RSTRING_PTR(vfile);
+#ifndef FIXED
+    else
+	file = create_eval_container_name(src);
+#endif
     return eval_string(self, src, scope, file, line);
 }
 
 VALUE
 rb_eval_string(const char *str)
 {
+#ifdef FIXED
+    return eval_string(rb_vm_top_self(), rb_str_new2(str), Qnil, 
+		       create_eval_container_name(rb_str_new2(str)), 1);
+#else
     return eval_string(rb_vm_top_self(), rb_str_new2(str), Qnil, "(eval)", 1);
+#endif
 }
 
 VALUE
@@ -1265,6 +1307,10 @@
 	    if (argc > 1) {
 		file = StringValuePtr(argv[1]);
 	    }
+#ifdef FIXED
+	    else 
+		file = create_eval_container_name(argv[1]);
+#endif
 	}
 	return eval_under(klass, self, argv[0], file, line);
     }
===================================================================
--- test/ruby/test_beginendblock.rb	(revision 28647)
+++ test/ruby/test_beginendblock.rb	(working copy)
@@ -69,7 +69,7 @@
     system(ruby, launcherpath, erroutpath)
     expected = <<EOW
 endblockwarn_rb:2: warning: END in method; use at_exit
-(eval):2: warning: END in method; use at_exit
+(eval: \"  def end2\\n  \"...):2: warning: END in method; use at_exit
 EOW
     assert_equal(expected, File.read(erroutpath))
     # expecting Tempfile to unlink launcher and errout file.
