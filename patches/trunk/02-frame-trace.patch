This patch adds adds the ability to set tracing on or off per frame.
Subsequent frames created which are called a frame with tracing set
off keeps tracing off by default.  (Infrequently one may want to
override this default behavior such as when wants to debug a
debugger.)  When frame returns, the trace bit is taken from the value
set from the previous frame's trace bit.

There is already a such a tracing bit that is similar which is set per
thread, but I don't think this is as useful.  When a trace hook is
called, if the hook yields to the debugged program (in the same
thread), I think the desired intent would be that tracing to turn
tracing back on if that is what it was before entering the hook.

This patch is helps make a debugger "step out" (or in gdb "finish"
command) fast.

Finally, sometimes one wants to do some setup before running a trace
hook, or write some code which simulates calling the hook as though it
were triggered by the runtime, even though it isn't. An example of
this is an immediate call to a debugger from the source code to be
debugged. This is in contrast to waiting for the next event to trigger
a call to a debugger. 

In ruby-debug situation one writes "debugger(:immediate => true)" and
this is used as a workaround for getting into the debugger in a method
at a point when there are no subsequent "line" events in that
method. Although in the next debugger this won't be needed, it still
is a nice thing to have. From the programmer's standpoint such an
immediate stop mechanism more straightforward and predictable.

In such a situation, the setup code ("debugger" above) may also call
other methods before entering the hook and so we want an easy way to
make sure those routines don't get traced just as the setup routine
isn't traced.

One might make a case for removing the trace bit in the thread
strucuture and having the frame bit subsume that. To be conservative
and compatible, I haven't done that.

Index: vm_core.h
===================================================================
--- vm_core.h	(revision 28955)
+++ vm_core.h	(working copy)
@@ -330,6 +330,9 @@
     rb_iseq_t *block_iseq;	/* cfp[8] / block[3] */
     VALUE proc;			/* cfp[9] / block[4] */
     const rb_method_entry_t *me;/* cfp[10] */
+    short int tracing;          /* Bits to control per-frame event tracing. 
+				   See VM_FRAME_TRACE_xxx defines.
+				 */
 } rb_control_frame_t;
 
 typedef struct rb_block_struct {
@@ -567,6 +572,10 @@
 
 #define VM_FRAME_TYPE(cfp) ((cfp)->flag & VM_FRAME_MAGIC_MASK)
 
+#define VM_FRAME_TRACE_RETURN 0x01  /* Call trace hook on return. */
+#define VM_FRAME_TRACE_OFF    0x02  /* Turn of event hook tracing in this frame
+				       and any frames created from this one. */
+
 /* other frame flag */
 #define VM_FRAME_FLAG_PASSED 0x0100
 
Index: thread.c
===================================================================
--- thread.c	(revision 28955)
+++ thread.c	(working copy)
@@ -3793,22 +3801,34 @@
 void
 rb_threadptr_exec_event_hooks(rb_thread_t *th, rb_event_flag_t flag, VALUE self, ID id, VALUE klass)
 {
-    const VALUE errinfo = th->errinfo;
-    const rb_event_flag_t wait_event = th->event_flags;
+    int do_tracing;
 
     if (self == rb_mRubyVMFrozenCore) return;
-    if (wait_event & flag) {
-	exec_event_hooks(th->event_hooks, flag, self, id, klass);
-    }
-    if (wait_event & RUBY_EVENT_VM) {
-	if (th->vm->event_hooks == NULL) {
-	    th->event_flags &= (~RUBY_EVENT_VM);
-	}
-	else {
-	    exec_event_hooks(th->vm->event_hooks, flag, self, id, klass);
+
+    /* Either we haven't turned off tracing via the thread mechanism
+       or we set a return trace and the event is a some kind of return. */
+    do_tracing = UNLIKELY( (th->tracing <= 0 && 
+			    !(th->cfp->tracing & VM_FRAME_TRACE_OFF)) ||
+			   ((flag & RUBY_EVENT_C_RETURN | RUBY_EVENT_RETURN)
+			    && th->cfp->tracing & VM_FRAME_TRACE_RETURN) );
+    if (do_tracing) {
+	const VALUE errinfo = th->errinfo;
+	const rb_event_flag_t wait_event = th->event_flags;
+	
+	if (wait_event & flag) {
+	    if (UNLIKELY(!RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(th, th->cfp)))
+		exec_event_hooks(th->event_hooks, flag, self, id, klass);
+	}
+	if (wait_event & RUBY_EVENT_VM) {
+	    if (th->vm->event_hooks == NULL) {
+		th->event_flags &= (~RUBY_EVENT_VM);
+	    }
+	    else {
+		exec_event_hooks(th->vm->event_hooks, flag, self, id, klass);
+	    }
 	}
+	th->errinfo = errinfo;
     }
-    th->errinfo = errinfo;
 }
 
 void
@@ -4097,7 +4181,7 @@
 ruby_suppress_tracing(VALUE (*func)(VALUE, int), VALUE arg, int always)
 {
     rb_thread_t *th = GET_THREAD();
-    int state, tracing;
+    int state, tracing, cfp_tracing;
     volatile int raised;
     VALUE result = Qnil;
 
@@ -4106,6 +4182,8 @@
     }
     else {
 	th->tracing = 1;
+	cfp_tracing = th->cfp->tracing;
+	th->cfp->tracing &= VM_FRAME_TRACE_OFF;
     }
 
     raised = rb_threadptr_reset_raised(th);
@@ -4121,6 +4207,7 @@
     POP_TAG();
 
     th->tracing = tracing;
+    th->cfp->tracing = tracing;
     if (state) {
 	JUMP_TAG(state);
     }
Index: vm_insnhelper.c
Index: vm_insnhelper.c
===================================================================
--- vm_insnhelper.c	(revision 28955)
+++ vm_insnhelper.c	(working copy)
@@ -26,9 +26,12 @@
 	      const VALUE *pc, VALUE *sp, VALUE *lfp,
 	      int local_size)
 {
+    short int tracing = 0;
     rb_control_frame_t * const cfp = th->cfp - 1;
     int i;
 
+    if (type != VM_FRAME_MAGIC_TOP) tracing = th->cfp->tracing;
+
     if ((void *)(sp + local_size) >= (void *)cfp) {
 	rb_exc_raise(sysstack_error);
     }
@@ -60,6 +63,7 @@
     cfp->dfp = sp;
     cfp->proc = 0;
     cfp->me = 0;
+    cfp->tracing = tracing & ~VM_FRAME_TRACE_RETURN;
 
 #define COLLECT_PROFILE 0
 #if COLLECT_PROFILE
