Add support to get at run-time the number of parameters passed to a C
function. Currently the arity (but called "argc") is stored in the
method structure. In order for a debugger to show and access C
function arguments, it needs to know how many were passed.

Ideally I would like to see this extended for non-C calls,
OPTIMIZED_METHOD_TYPE_SEND, and OPTIMIZED_METHOD_TYPE_CALL.

Index: method.h
===================================================================
--- method.h	(revision 28783)
+++ method.h	(working copy)
@@ -46,7 +46,11 @@
 
 typedef struct rb_method_cfunc_struct {
     VALUE (*func)(ANYARGS);
-    int argc;
+    int argc; /* This should probably be called "arity" since it is based
+		 on the static prototype, not the supplied arguments
+		 at runtime. */
+    int actual_argc; /* This probably should be called argc. It is the
+			argument count at runtime.*/
 } rb_method_cfunc_t;
 
 typedef struct rb_method_attr_struct {
Index: vm_eval.c
===================================================================
--- vm_eval.c	(revision 28783)
+++ vm_eval.c	(working copy)
@@ -75,6 +74,10 @@
 		vm_push_frame(th, 0, VM_FRAME_MAGIC_CFUNC,
 			      recv, (VALUE)blockptr, 0, reg_cfp->sp, 0, 1);
 
+	    /* Store actual argument count. Note that cfunc.argc
+	       contains the prototype value.
+	    */
+	    me->def->body.cfunc.actual_argc = argc;
 	    cfp->me = me;
 	    val = call_cfunc(def->body.cfunc.func, recv, def->body.cfunc.argc, argc, argv);
 
Index: vm_insnhelper.c
===================================================================
--- vm_insnhelper.c	(revision 28783)
+++ vm_insnhelper.c	(working copy)
@@ -399,6 +395,10 @@
 
     cfp = vm_push_frame(th, 0, VM_FRAME_MAGIC_CFUNC,
 			recv, (VALUE) blockptr, 0, reg_cfp->sp, 0, 1);
+    /* Store actual argument count. Note that cfunc.argc contains the
+       prototype value.
+    */
+    me->def->body.cfunc.actual_argc = num;
     cfp->me = me;
     reg_cfp->sp -= num + 1;
 
 
